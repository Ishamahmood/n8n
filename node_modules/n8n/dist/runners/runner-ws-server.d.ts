import type { BrokerMessage } from '@n8n/task-runner';
import type WebSocket from 'ws';
import { Logger } from '../logging/logger.service';
import { DefaultTaskRunnerDisconnectAnalyzer } from './default-task-runner-disconnect-analyzer';
import type { DisconnectAnalyzer, TaskRunnerServerInitRequest, TaskRunnerServerInitResponse } from './runner-types';
import { TaskBroker, type TaskRunner } from './task-broker.service';
export declare class TaskRunnerWsServer {
    private readonly logger;
    private readonly taskBroker;
    private disconnectAnalyzer;
    runnerConnections: Map<TaskRunner['id'], WebSocket>;
    constructor(logger: Logger, taskBroker: TaskBroker, disconnectAnalyzer: DefaultTaskRunnerDisconnectAnalyzer);
    setDisconnectAnalyzer(disconnectAnalyzer: DisconnectAnalyzer): void;
    getDisconnectAnalyzer(): DefaultTaskRunnerDisconnectAnalyzer;
    sendMessage(id: TaskRunner['id'], message: BrokerMessage.ToRunner.All): void;
    add(id: TaskRunner['id'], connection: WebSocket): void;
    removeConnection(id: TaskRunner['id']): Promise<void>;
    handleRequest(req: TaskRunnerServerInitRequest, _res: TaskRunnerServerInitResponse): void;
}
