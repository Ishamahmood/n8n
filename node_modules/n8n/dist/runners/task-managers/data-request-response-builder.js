"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataRequestResponseBuilder = void 0;
class DataRequestResponseBuilder {
    constructor(taskData, requestParams) {
        this.taskData = taskData;
        this.requestParams = requestParams;
        this.requestedNodeNames = new Set();
        this.requestedNodeNames = new Set(requestParams.dataOfNodes);
        if (this.requestParams.prevNode && this.requestParams.dataOfNodes !== 'all') {
            this.requestedNodeNames.add(this.determinePrevNodeName());
        }
    }
    build() {
        const { taskData: td } = this;
        return {
            workflow: this.buildWorkflow(td.workflow),
            connectionInputData: this.buildConnectionInputData(td.connectionInputData),
            inputData: this.buildInputData(td.inputData),
            itemIndex: td.itemIndex,
            activeNodeName: td.activeNodeName,
            contextNodeName: td.contextNodeName,
            defaultReturnRunIndex: td.defaultReturnRunIndex,
            mode: td.mode,
            envProviderState: this.buildEnvProviderState(td.envProviderState),
            node: td.node,
            runExecutionData: this.buildRunExecutionData(td.runExecutionData),
            runIndex: td.runIndex,
            selfData: td.selfData,
            siblingParameters: td.siblingParameters,
            executeData: this.buildExecuteData(td.executeData),
            additionalData: this.buildAdditionalData(td.additionalData),
        };
    }
    buildAdditionalData(additionalData) {
        return {
            formWaitingBaseUrl: additionalData.formWaitingBaseUrl,
            instanceBaseUrl: additionalData.instanceBaseUrl,
            restApiUrl: additionalData.restApiUrl,
            variables: additionalData.variables,
            webhookBaseUrl: additionalData.webhookBaseUrl,
            webhookTestBaseUrl: additionalData.webhookTestBaseUrl,
            webhookWaitingBaseUrl: additionalData.webhookWaitingBaseUrl,
            currentNodeParameters: additionalData.currentNodeParameters,
            executionId: additionalData.executionId,
            executionTimeoutTimestamp: additionalData.executionTimeoutTimestamp,
            restartExecutionId: additionalData.restartExecutionId,
            userId: additionalData.userId,
        };
    }
    buildExecuteData(executeData) {
        if (executeData === undefined) {
            return undefined;
        }
        return {
            node: executeData.node,
            data: this.requestParams.input ? executeData.data : {},
            source: executeData.source,
        };
    }
    buildRunExecutionData(runExecutionData) {
        if (this.requestParams.dataOfNodes === 'all') {
            return runExecutionData;
        }
        return {
            startData: runExecutionData.startData,
            resultData: {
                error: runExecutionData.resultData.error,
                lastNodeExecuted: runExecutionData.resultData.lastNodeExecuted,
                metadata: runExecutionData.resultData.metadata,
                runData: this.buildRunData(runExecutionData.resultData.runData),
                pinData: this.buildPinData(runExecutionData.resultData.pinData),
            },
            executionData: runExecutionData.executionData
                ? {
                    contextData: runExecutionData.executionData?.contextData,
                    nodeExecutionStack: runExecutionData.executionData.nodeExecutionStack,
                    metadata: runExecutionData.executionData.metadata,
                    waitingExecution: runExecutionData.executionData.waitingExecution,
                    waitingExecutionSource: runExecutionData.executionData.waitingExecutionSource,
                }
                : undefined,
        };
    }
    buildRunData(runData) {
        return this.filterObjectByNodeNames(runData);
    }
    buildPinData(pinData) {
        return pinData ? this.filterObjectByNodeNames(pinData) : undefined;
    }
    buildEnvProviderState(envProviderState) {
        if (this.requestParams.env) {
            return envProviderState;
        }
        return {
            env: {},
            isEnvAccessBlocked: envProviderState.isEnvAccessBlocked,
            isProcessAvailable: envProviderState.isProcessAvailable,
        };
    }
    buildInputData(inputData) {
        if (this.requestParams.input) {
            return inputData;
        }
        return {};
    }
    buildConnectionInputData(connectionInputData) {
        if (this.requestParams.input) {
            return connectionInputData;
        }
        return [];
    }
    buildWorkflow(workflow) {
        return {
            id: workflow.id,
            name: workflow.name,
            active: workflow.active,
            connections: workflow.connectionsBySourceNode,
            nodes: Object.values(workflow.nodes),
            pinData: workflow.pinData,
            settings: workflow.settings,
            staticData: workflow.staticData,
        };
    }
    filterObjectByNodeNames(obj) {
        if (this.requestParams.dataOfNodes === 'all') {
            return obj;
        }
        const filteredObj = {};
        for (const nodeName in obj) {
            if (!Object.prototype.hasOwnProperty.call(obj, nodeName)) {
                continue;
            }
            if (this.requestedNodeNames.has(nodeName)) {
                filteredObj[nodeName] = obj[nodeName];
            }
        }
        return filteredObj;
    }
    determinePrevNodeName() {
        const sourceData = this.taskData.executeData?.source?.main?.[0];
        if (!sourceData) {
            return '';
        }
        return sourceData.previousNode;
    }
}
exports.DataRequestResponseBuilder = DataRequestResponseBuilder;
//# sourceMappingURL=data-request-response-builder.js.map