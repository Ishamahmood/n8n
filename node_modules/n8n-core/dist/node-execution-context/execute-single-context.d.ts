import type { ICredentialDataDecryptedObject, IGetNodeParameterOptions, INode, INodeExecutionData, IRunExecutionData, IExecuteSingleFunctions, IWorkflowExecuteAdditionalData, Workflow, WorkflowExecuteMode, ITaskDataConnections, IExecuteData, ContextType, AiEvent, ISourceData } from 'n8n-workflow';
import { NodeExecutionContext } from './node-execution-context';
export declare class ExecuteSingleContext extends NodeExecutionContext implements IExecuteSingleFunctions {
    private readonly runExecutionData;
    private readonly runIndex;
    private readonly connectionInputData;
    private readonly inputData;
    private readonly itemIndex;
    private readonly executeData;
    private readonly abortSignal?;
    readonly helpers: IExecuteSingleFunctions['helpers'];
    constructor(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, itemIndex: number, executeData: IExecuteData, abortSignal?: AbortSignal | undefined);
    getExecutionCancelSignal(): AbortSignal | undefined;
    onExecutionCancellation(handler: () => unknown): void;
    continueOnFail(): boolean;
    evaluateExpression(expression: string, evaluateItemIndex: number | undefined): import("n8n-workflow").NodeParameterValue | import("n8n-workflow").INodeParameters | import("n8n-workflow").INodeParameters[] | import("n8n-workflow").NodeParameterValue[];
    getContext(type: ContextType): import("n8n-workflow").IContextObject;
    getInputData(inputIndex?: number, inputName?: string): INodeExecutionData | {
        json: {};
    };
    getItemIndex(): number;
    getNodeParameter(parameterName: string, fallbackValue?: any, options?: IGetNodeParameterOptions): object | import("n8n-workflow").NodeParameterValueType;
    getCredentials<T extends object = ICredentialDataDecryptedObject>(type: string): Promise<T>;
    getExecuteData(): IExecuteData;
    getWorkflowDataProxy(): import("n8n-workflow").IWorkflowDataProxyData;
    getInputSourceData(inputIndex?: number, inputName?: string): ISourceData;
    logAiEvent(eventName: AiEvent, msg: string): void;
}
