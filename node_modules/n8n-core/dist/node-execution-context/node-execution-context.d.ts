import type { FunctionsBase, INode, INodeExecutionData, IWorkflowExecuteAdditionalData, NodeTypeAndVersion, Workflow, WorkflowExecuteMode } from 'n8n-workflow';
import { LoggerProxy } from 'n8n-workflow';
import { InstanceSettings } from '../InstanceSettings';
export declare abstract class NodeExecutionContext implements Omit<FunctionsBase, 'getCredentials'> {
    protected readonly workflow: Workflow;
    protected readonly node: INode;
    protected readonly additionalData: IWorkflowExecuteAdditionalData;
    protected readonly mode: WorkflowExecuteMode;
    protected readonly instanceSettings: InstanceSettings;
    constructor(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode);
    get logger(): typeof LoggerProxy;
    getExecutionId(): string;
    getNode(): INode;
    getWorkflow(): {
        id: string;
        name: string | undefined;
        active: boolean;
    };
    getMode(): WorkflowExecuteMode;
    getWorkflowStaticData(type: string): import("n8n-workflow").IDataObject;
    getChildNodes(nodeName: string): NodeTypeAndVersion[];
    getParentNodes(nodeName: string): NodeTypeAndVersion[];
    getKnownNodeTypes(): import("n8n-workflow").IDataObject;
    getRestApiUrl(): string;
    getInstanceBaseUrl(): string;
    getInstanceId(): string;
    getTimezone(): string;
    getCredentialsProperties(type: string): import("n8n-workflow").INodeProperties[];
    prepareOutputData(outputData: INodeExecutionData[]): Promise<INodeExecutionData[][]>;
}
