"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteSingleContext = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const NodeExecuteFunctions_1 = require("../NodeExecuteFunctions");
const node_execution_context_1 = require("./node-execution-context");
class ExecuteSingleContext extends node_execution_context_1.NodeExecutionContext {
    constructor(workflow, node, additionalData, mode, runExecutionData, runIndex, connectionInputData, inputData, itemIndex, executeData, abortSignal) {
        super(workflow, node, additionalData, mode);
        this.runExecutionData = runExecutionData;
        this.runIndex = runIndex;
        this.connectionInputData = connectionInputData;
        this.inputData = inputData;
        this.itemIndex = itemIndex;
        this.executeData = executeData;
        this.abortSignal = abortSignal;
        this.helpers = {
            createDeferredPromise: n8n_workflow_1.createDeferredPromise,
            returnJsonArray: NodeExecuteFunctions_1.returnJsonArray,
            ...(0, NodeExecuteFunctions_1.getRequestHelperFunctions)(workflow, node, additionalData, runExecutionData, connectionInputData),
            ...(0, NodeExecuteFunctions_1.getBinaryHelperFunctions)(additionalData, workflow.id),
            assertBinaryData: (propertyName, inputIndex = 0) => (0, NodeExecuteFunctions_1.assertBinaryData)(inputData, node, itemIndex, propertyName, inputIndex),
            getBinaryDataBuffer: async (propertyName, inputIndex = 0) => await (0, NodeExecuteFunctions_1.getBinaryDataBuffer)(inputData, itemIndex, propertyName, inputIndex),
        };
    }
    getExecutionCancelSignal() {
        return this.abortSignal;
    }
    onExecutionCancellation(handler) {
        const fn = () => {
            this.abortSignal?.removeEventListener('abort', fn);
            handler();
        };
        this.abortSignal?.addEventListener('abort', fn);
    }
    continueOnFail() {
        return (0, NodeExecuteFunctions_1.continueOnFail)(this.node);
    }
    evaluateExpression(expression, evaluateItemIndex) {
        evaluateItemIndex = evaluateItemIndex ?? this.itemIndex;
        return this.workflow.expression.resolveSimpleParameterValue(`=${expression}`, {}, this.runExecutionData, this.runIndex, evaluateItemIndex, this.node.name, this.connectionInputData, this.mode, (0, NodeExecuteFunctions_1.getAdditionalKeys)(this.additionalData, this.mode, this.runExecutionData), this.executeData);
    }
    getContext(type) {
        return n8n_workflow_1.NodeHelpers.getContext(this.runExecutionData, type, this.node);
    }
    getInputData(inputIndex = 0, inputName = 'main') {
        if (!this.inputData.hasOwnProperty(inputName)) {
            return { json: {} };
        }
        if (this.inputData[inputName].length < inputIndex) {
            throw new n8n_workflow_1.ApplicationError('Could not get input index', {
                extra: { inputIndex, inputName },
            });
        }
        const allItems = this.inputData[inputName][inputIndex];
        if (allItems === null || allItems === undefined) {
            throw new n8n_workflow_1.ApplicationError('Input index was not set', {
                extra: { inputIndex, inputName },
            });
        }
        const data = allItems[this.itemIndex];
        if (data === null || data === undefined) {
            throw new n8n_workflow_1.ApplicationError('Value of input with given index was not set', {
                extra: { inputIndex, inputName, itemIndex: this.itemIndex },
            });
        }
        return data;
    }
    getItemIndex() {
        return this.itemIndex;
    }
    getNodeParameter(parameterName, fallbackValue, options) {
        return (0, NodeExecuteFunctions_1.getNodeParameter)(this.workflow, this.runExecutionData, this.runIndex, this.connectionInputData, this.node, parameterName, this.itemIndex, this.mode, (0, NodeExecuteFunctions_1.getAdditionalKeys)(this.additionalData, this.mode, this.runExecutionData), this.executeData, fallbackValue, options);
    }
    async getCredentials(type) {
        return await (0, NodeExecuteFunctions_1.getCredentials)(this.workflow, this.node, type, this.additionalData, this.mode, this.executeData, this.runExecutionData, this.runIndex, this.connectionInputData, this.itemIndex);
    }
    getExecuteData() {
        return this.executeData;
    }
    getWorkflowDataProxy() {
        return new n8n_workflow_1.WorkflowDataProxy(this.workflow, this.runExecutionData, this.runIndex, this.itemIndex, this.node.name, this.connectionInputData, {}, this.mode, (0, NodeExecuteFunctions_1.getAdditionalKeys)(this.additionalData, this.mode, this.runExecutionData), this.executeData).getDataProxy();
    }
    getInputSourceData(inputIndex = 0, inputName = 'main') {
        if (this.executeData?.source === null) {
            throw new n8n_workflow_1.ApplicationError('Source data is missing');
        }
        return this.executeData.source[inputName][inputIndex];
    }
    logAiEvent(eventName, msg) {
        return this.additionalData.logAiEvent(eventName, {
            executionId: this.additionalData.executionId ?? 'unsaved-execution',
            nodeName: this.node.name,
            workflowName: this.workflow.name ?? 'Unnamed workflow',
            nodeType: this.node.type,
            workflowId: this.workflow.id ?? 'unsaved-workflow',
            msg,
        });
    }
}
exports.ExecuteSingleContext = ExecuteSingleContext;
//# sourceMappingURL=execute-single-context.js.map