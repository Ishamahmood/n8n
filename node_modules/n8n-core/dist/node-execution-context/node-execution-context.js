"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeExecutionContext = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const typedi_1 = require("typedi");
const InstanceSettings_1 = require("../InstanceSettings");
class NodeExecutionContext {
    constructor(workflow, node, additionalData, mode) {
        this.workflow = workflow;
        this.node = node;
        this.additionalData = additionalData;
        this.mode = mode;
        this.instanceSettings = typedi_1.Container.get(InstanceSettings_1.InstanceSettings);
    }
    get logger() {
        return n8n_workflow_1.LoggerProxy;
    }
    getExecutionId() {
        return this.additionalData.executionId;
    }
    getNode() {
        return (0, n8n_workflow_1.deepCopy)(this.node);
    }
    getWorkflow() {
        const { id, name, active } = this.workflow;
        return { id, name, active };
    }
    getMode() {
        return this.mode;
    }
    getWorkflowStaticData(type) {
        return this.workflow.getStaticData(type, this.node);
    }
    getChildNodes(nodeName) {
        const output = [];
        const nodeNames = this.workflow.getChildNodes(nodeName);
        for (const n of nodeNames) {
            const node = this.workflow.nodes[n];
            output.push({
                name: node.name,
                type: node.type,
                typeVersion: node.typeVersion,
            });
        }
        return output;
    }
    getParentNodes(nodeName) {
        const output = [];
        const nodeNames = this.workflow.getParentNodes(nodeName);
        for (const n of nodeNames) {
            const node = this.workflow.nodes[n];
            output.push({
                name: node.name,
                type: node.type,
                typeVersion: node.typeVersion,
            });
        }
        return output;
    }
    getKnownNodeTypes() {
        return this.workflow.nodeTypes.getKnownTypes();
    }
    getRestApiUrl() {
        return this.additionalData.restApiUrl;
    }
    getInstanceBaseUrl() {
        return this.additionalData.instanceBaseUrl;
    }
    getInstanceId() {
        return this.instanceSettings.instanceId;
    }
    getTimezone() {
        return this.workflow.timezone;
    }
    getCredentialsProperties(type) {
        return this.additionalData.credentialsHelper.getCredentialsProperties(type);
    }
    async prepareOutputData(outputData) {
        return [outputData];
    }
}
exports.NodeExecutionContext = NodeExecutionContext;
//# sourceMappingURL=node-execution-context.js.map