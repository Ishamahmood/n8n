"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HookContext = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const NodeExecuteFunctions_1 = require("../NodeExecuteFunctions");
const node_execution_context_1 = require("./node-execution-context");
class HookContext extends node_execution_context_1.NodeExecutionContext {
    constructor(workflow, node, additionalData, mode, activation, webhookData) {
        super(workflow, node, additionalData, mode);
        this.activation = activation;
        this.webhookData = webhookData;
        this.helpers = (0, NodeExecuteFunctions_1.getRequestHelperFunctions)(workflow, node, additionalData);
    }
    getActivationMode() {
        return this.activation;
    }
    async getCredentials(type) {
        return await (0, NodeExecuteFunctions_1.getCredentials)(this.workflow, this.node, type, this.additionalData, this.mode);
    }
    getNodeParameter(parameterName, fallbackValue, options) {
        const runExecutionData = null;
        const itemIndex = 0;
        const runIndex = 0;
        const connectionInputData = [];
        return (0, NodeExecuteFunctions_1.getNodeParameter)(this.workflow, runExecutionData, runIndex, connectionInputData, this.node, parameterName, itemIndex, this.mode, (0, NodeExecuteFunctions_1.getAdditionalKeys)(this.additionalData, this.mode, runExecutionData), undefined, fallbackValue, options);
    }
    getNodeWebhookUrl(name) {
        return (0, NodeExecuteFunctions_1.getNodeWebhookUrl)(name, this.workflow, this.node, this.additionalData, this.mode, (0, NodeExecuteFunctions_1.getAdditionalKeys)(this.additionalData, this.mode, null), this.webhookData?.isTest);
    }
    getWebhookName() {
        if (this.webhookData === undefined) {
            throw new n8n_workflow_1.ApplicationError('Only supported in webhook functions');
        }
        return this.webhookData.webhookDescription.name;
    }
    getWebhookDescription(name) {
        return (0, NodeExecuteFunctions_1.getWebhookDescription)(name, this.workflow, this.node);
    }
}
exports.HookContext = HookContext;
//# sourceMappingURL=hook-context.js.map