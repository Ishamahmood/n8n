"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIncomingData = getIncomingData;
exports.getIncomingDataFromAnyRun = getIncomingDataFromAnyRun;
const a = __importStar(require("assert"));
function getIncomingData(runData, nodeName, runIndex, connectionType, outputIndex) {
    a.ok(runData[nodeName], `Can't find node with name '${nodeName}' in runData.`);
    a.ok(runData[nodeName][runIndex], `Can't find a run for index '${runIndex}' for node name '${nodeName}'`);
    a.ok(runData[nodeName][runIndex].data, `Can't find data for index '${runIndex}' for node name '${nodeName}'`);
    return runData[nodeName][runIndex].data[connectionType][outputIndex];
}
function getRunIndexLength(runData, nodeName) {
    return runData[nodeName]?.length ?? 0;
}
function getIncomingDataFromAnyRun(runData, nodeName, connectionType, outputIndex) {
    const maxRunIndexes = getRunIndexLength(runData, nodeName);
    for (let runIndex = 0; runIndex < maxRunIndexes; runIndex++) {
        const data = getIncomingData(runData, nodeName, runIndex, connectionType, outputIndex);
        if (data && data.length > 0) {
            return { data, runIndex };
        }
    }
    return undefined;
}
//# sourceMappingURL=getIncomingData.js.map