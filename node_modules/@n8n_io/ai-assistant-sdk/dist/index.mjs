// package.json
var package_default = {
  name: "@n8n_io/ai-assistant-sdk",
  version: "1.10.3",
  description: "n8n AI assistant SDK",
  author: "",
  private: false,
  license: "UNLICENSED",
  engines: {
    node: ">=20.15",
    pnpm: ">=8.14"
  },
  main: "./dist/index.js",
  types: "./dist/index.d.ts",
  module: "./dist/index.mjs",
  packageManager: "pnpm@9.10.0",
  scripts: {
    typecheck: "tsc --noEmit",
    build: "tsup",
    format: "prettier --write . --ignore-path ../.prettierignore",
    lint: "eslint ./src --quiet -c ../.eslintrc.js",
    start: "node ./dist/index.js",
    test: "node --import tsx --test test/**.test.ts",
    watch: "tsup src/index.ts --watch"
  },
  devDependencies: {
    "@faker-js/faker": "^8.4.1",
    "@types/node": "^22.4.0",
    eslint: "^9.6.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    nock: "^14.0.0-beta.9",
    prettier: "^3.3.2",
    tsup: "^8.1.0",
    tsx: "^4.17.0",
    typescript: "^5.5.3"
  }
};

// src/index.ts
var DEFAULT_SERVICE_BASE_URL = "https://ai-assistant.n8n.io";
var AiAssistantClient = class {
  licenseCert;
  consumerId;
  n8nVersion;
  baseUrl = DEFAULT_SERVICE_BASE_URL;
  logLevel = "info";
  activeToken;
  /**
   * Create a client for the AI service.
   * @param licenseCert - The license certificate. You can get it from the n8n.
   * @param consumerId - The consumer ID.
   * @param baseUrl - The base URL of the AI service API.
   * @returns {RequestHandler}
   */
  constructor({
    licenseCert,
    consumerId,
    n8nVersion,
    baseUrl,
    logLevel
  }) {
    this.licenseCert = licenseCert;
    this.consumerId = consumerId;
    this.n8nVersion = n8nVersion;
    this.baseUrl = baseUrl ?? this.baseUrl;
    this.logLevel = logLevel ?? this.logLevel;
    this.debug("Initializing AI Assistant Service Client", {
      baseUrl: this.baseUrl,
      consumerId: this.consumerId,
      n8nVersion: this.n8nVersion,
      licenseCert: this.licenseCert.substring(0, 5)
    });
  }
  async chat(payload, user) {
    return await this.postRequest("/v1/chat", payload, user);
  }
  async applySuggestion(payload, user) {
    const response = await this.postRequest("/v1/chat/apply-suggestion", payload, user);
    const data = await response.json();
    if (isValidApplySuggestionResponse(data)) {
      return data;
    }
    throw new Error("Invalid response from assistant service");
  }
  async askAi(payload, user) {
    {
      const response = await this.postRequest("/v1/ask-ai", payload, user);
      const data = await response.json();
      if (isValidAskAiResponse(data)) {
        return data;
      }
      throw new Error("Invalid response from assistant service");
    }
  }
  getHeaders(user) {
    return {
      "Content-Type": "application/json",
      authorization: `Bearer ${this.activeToken}`,
      "x-consumer-id": this.consumerId,
      "x-user-id": user.id,
      "x-sdk-version": package_default.version,
      "x-n8n-version": this.n8nVersion
    };
  }
  async refreshAuthToken() {
    const response = await fetch(`${this.baseUrl}/auth/token`, {
      method: "POST",
      body: JSON.stringify({ licenseCert: this.licenseCert }),
      headers: { "Content-Type": "application/json" }
    });
    const data = await response.json();
    if (typeof data === "object" && data && "accessToken" in data && data.accessToken && typeof data.accessToken === "string") {
      this.activeToken = data.accessToken;
      return;
    }
    throw new Error("Could not retrieve access token");
  }
  async postRequest(endpoint, payload, user) {
    if (!this.activeToken) {
      await this.refreshAuthToken();
    }
    if (!this.activeToken) {
      throw new Error("No token to call assistant service");
    }
    const url = `${this.baseUrl}${endpoint}`;
    let response = await fetch(url, {
      headers: this.getHeaders(user),
      method: "POST",
      body: JSON.stringify(payload)
    });
    if (!response.ok && response.status === 401) {
      await this.refreshAuthToken();
      response = await fetch(url, {
        headers: this.getHeaders(user),
        method: "POST",
        body: JSON.stringify(payload)
      });
    } else if (!response.ok) {
      const error = await response.json();
      this.debug(`API Error ${JSON.stringify(error)}`);
      const message = typeof error === "object" && error && "message" in error && typeof error.message === "string" ? error.message : response.statusText;
      throw new Error(message);
    }
    return response;
  }
  debug(message, debugInfo) {
    if (this.logLevel === "debug") {
      console.debug(formatLog(message), formatLog(JSON.stringify(debugInfo)));
    }
  }
};
function formatLog(message) {
  return `[ai-assistant-sdk] ${message}`;
}
function isValidApplySuggestionResponse(response) {
  return typeof response === "object" && !!response && "parameters" in response && "sessionId" in response;
}
function isValidAskAiResponse(response) {
  return typeof response === "object" && !!response && "code" in response;
}
export {
  AiAssistantClient
};
