"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsTaskRunner = void 0;
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const a = __importStar(require("node:assert"));
const node_vm_1 = require("node:vm");
const task_runner_1 = require("../task-runner");
const built_ins_parser_1 = require("./built-ins-parser/built-ins-parser");
const built_ins_parser_state_1 = require("./built-ins-parser/built-ins-parser-state");
const error_like_1 = require("./errors/error-like");
const execution_error_1 = require("./errors/execution-error");
const serializable_error_1 = require("./errors/serializable-error");
const require_resolver_1 = require("./require-resolver");
const result_validation_1 = require("./result-validation");
class JsTaskRunner extends task_runner_1.TaskRunner {
    constructor(config, name = 'JS Task Runner') {
        super({
            taskType: 'javascript',
            name,
            ...config.baseRunnerConfig,
        });
        this.builtInsParser = new built_ins_parser_1.BuiltInsParser();
        const { jsRunnerConfig } = config;
        const parseModuleAllowList = (moduleList) => moduleList === '*' ? null : new Set(moduleList.split(',').map((x) => x.trim()));
        this.requireResolver = (0, require_resolver_1.createRequireResolver)({
            allowedBuiltInModules: parseModuleAllowList(jsRunnerConfig.allowedBuiltInModules ?? ''),
            allowedExternalModules: parseModuleAllowList(jsRunnerConfig.allowedExternalModules ?? ''),
        });
    }
    async executeTask(task) {
        const settings = task.settings;
        a.ok(settings, 'JS Code not sent to runner');
        const neededBuiltInsResult = this.builtInsParser.parseUsedBuiltIns(settings.code);
        const neededBuiltIns = neededBuiltInsResult.ok
            ? neededBuiltInsResult.result
            : built_ins_parser_state_1.BuiltInsParserState.newNeedsAllDataState();
        const data = await this.requestData(task.taskId, neededBuiltIns.toDataRequestParams());
        if (neededBuiltIns.needsAllNodes) {
            const uniqueNodeTypes = new Map(data.workflow.nodes.map((node) => [
                `${node.type}|${node.typeVersion}`,
                { name: node.type, version: node.typeVersion },
            ]));
            const unknownNodeTypes = this.nodeTypes.onlyUnknown([...uniqueNodeTypes.values()]);
            const nodeTypes = await this.requestNodeTypes(task.taskId, unknownNodeTypes);
            this.nodeTypes.addNodeTypeDescriptions(nodeTypes);
        }
        const workflowParams = data.workflow;
        const workflow = new n8n_workflow_1.Workflow({
            ...workflowParams,
            nodeTypes: this.nodeTypes,
        });
        const customConsole = {
            log: (...args) => {
                const logOutput = args
                    .map((arg) => (typeof arg === 'object' && arg !== null ? JSON.stringify(arg) : arg))
                    .join(' ');
                void this.makeRpcCall(task.taskId, 'logNodeOutput', [logOutput]);
            },
        };
        const result = settings.nodeMode === 'runOnceForAllItems'
            ? await this.runForAllItems(task.taskId, settings, data, workflow, customConsole)
            : await this.runForEachItem(task.taskId, settings, data, workflow, customConsole);
        return {
            result,
            customData: data.runExecutionData.resultData.metadata,
        };
    }
    getNativeVariables() {
        return {
            Buffer,
            Function,
            eval,
            setTimeout,
            setInterval,
            setImmediate,
            clearTimeout,
            clearInterval,
            clearImmediate,
            btoa,
            atob,
            TextDecoder,
            TextDecoderStream,
            TextEncoder,
            TextEncoderStream,
            FormData,
        };
    }
    async runForAllItems(taskId, settings, data, workflow, customConsole) {
        const dataProxy = this.createDataProxy(data, workflow, data.itemIndex);
        const inputItems = data.connectionInputData;
        const context = {
            require: this.requireResolver,
            module: {},
            console: customConsole,
            items: inputItems,
            ...this.getNativeVariables(),
            ...dataProxy,
            ...this.buildRpcCallObject(taskId),
        };
        try {
            const result = (await (0, node_vm_1.runInNewContext)(`globalThis.global = globalThis; module.exports = async function VmCodeWrapper() {${settings.code}\n}()`, context));
            if (result === null) {
                return [];
            }
            return (0, result_validation_1.validateRunForAllItemsOutput)(result);
        }
        catch (e) {
            const error = this.toExecutionErrorIfNeeded(e);
            if (settings.continueOnFail) {
                return [{ json: { error: error.message } }];
            }
            throw error;
        }
    }
    async runForEachItem(taskId, settings, data, workflow, customConsole) {
        const inputItems = data.connectionInputData;
        const returnData = [];
        for (let index = 0; index < inputItems.length; index++) {
            const item = inputItems[index];
            const dataProxy = this.createDataProxy(data, workflow, index);
            const context = {
                require: this.requireResolver,
                module: {},
                console: customConsole,
                item,
                ...this.getNativeVariables(),
                ...dataProxy,
                ...this.buildRpcCallObject(taskId),
            };
            try {
                let result = (await (0, node_vm_1.runInNewContext)(`module.exports = async function VmCodeWrapper() {${settings.code}\n}()`, context));
                if (result === null) {
                    continue;
                }
                result = (0, result_validation_1.validateRunForEachItemOutput)(result, index);
                if (result) {
                    returnData.push(result.binary
                        ? {
                            json: result.json,
                            pairedItem: { item: index },
                            binary: result.binary,
                        }
                        : {
                            json: result.json,
                            pairedItem: { item: index },
                        });
                }
            }
            catch (e) {
                const error = this.toExecutionErrorIfNeeded(e);
                if (!settings.continueOnFail) {
                    throw error;
                }
                returnData.push({
                    json: { error: error.message },
                    pairedItem: {
                        item: index,
                    },
                });
            }
        }
        return returnData;
    }
    createDataProxy(data, workflow, itemIndex) {
        return new n8n_workflow_1.WorkflowDataProxy(workflow, data.runExecutionData, data.runIndex, itemIndex, data.activeNodeName, data.connectionInputData, data.siblingParameters, data.mode, (0, n8n_core_1.getAdditionalKeys)(data.additionalData, data.mode, data.runExecutionData), data.executeData, data.defaultReturnRunIndex, data.selfData, data.contextNodeName, data.envProviderState ?? {
            env: {},
            isEnvAccessBlocked: false,
            isProcessAvailable: true,
        }).getDataProxy({ throwOnMissingExecutionData: false });
    }
    toExecutionErrorIfNeeded(error) {
        if (error instanceof Error) {
            return (0, serializable_error_1.makeSerializable)(error);
        }
        if ((0, error_like_1.isErrorLike)(error)) {
            return new execution_error_1.ExecutionError(error);
        }
        return new execution_error_1.ExecutionError({ message: JSON.stringify(error) });
    }
}
exports.JsTaskRunner = JsTaskRunner;
//# sourceMappingURL=js-task-runner.js.map