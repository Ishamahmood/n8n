import type { CodeExecutionMode, INode, ITaskDataConnections, WorkflowParameters, IDataObject, IExecuteData, INodeExecutionData, INodeParameters, IRunExecutionData, WorkflowExecuteMode, EnvProviderState } from 'n8n-workflow';
import type { TaskResultData } from '../runner-types';
import { type Task, TaskRunner } from '../task-runner';
import type { MainConfig } from '../config/main-config';
export interface JSExecSettings {
    code: string;
    nodeMode: CodeExecutionMode;
    workflowMode: WorkflowExecuteMode;
    continueOnFail: boolean;
    mode: WorkflowExecuteMode;
}
export interface PartialAdditionalData {
    executionId?: string;
    restartExecutionId?: string;
    restApiUrl: string;
    instanceBaseUrl: string;
    formWaitingBaseUrl: string;
    webhookBaseUrl: string;
    webhookWaitingBaseUrl: string;
    webhookTestBaseUrl: string;
    currentNodeParameters?: INodeParameters;
    executionTimeoutTimestamp?: number;
    userId?: string;
    variables: IDataObject;
}
export interface DataRequestResponse {
    workflow: Omit<WorkflowParameters, 'nodeTypes'>;
    inputData: ITaskDataConnections;
    node: INode;
    runExecutionData: IRunExecutionData;
    runIndex: number;
    itemIndex: number;
    activeNodeName: string;
    connectionInputData: INodeExecutionData[];
    siblingParameters: INodeParameters;
    mode: WorkflowExecuteMode;
    envProviderState?: EnvProviderState;
    executeData?: IExecuteData;
    defaultReturnRunIndex: number;
    selfData: IDataObject;
    contextNodeName: string;
    additionalData: PartialAdditionalData;
}
export declare class JsTaskRunner extends TaskRunner {
    private readonly requireResolver;
    private readonly builtInsParser;
    constructor(config: MainConfig, name?: string);
    executeTask(task: Task<JSExecSettings>): Promise<TaskResultData>;
    private getNativeVariables;
    private runForAllItems;
    private runForEachItem;
    private createDataProxy;
    private toExecutionErrorIfNeeded;
}
