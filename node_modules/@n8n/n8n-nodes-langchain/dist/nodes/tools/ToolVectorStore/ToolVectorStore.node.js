"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolVectorStore = void 0;
const tools_1 = require("langchain/tools");
const chains_1 = require("langchain/chains");
const sharedFields_1 = require("../../../utils/sharedFields");
const logWrapper_1 = require("../../../utils/logWrapper");
class ToolVectorStore {
    constructor() {
        this.description = {
            displayName: 'Vector Store Tool',
            name: 'toolVectorStore',
            icon: 'fa:database',
            group: ['transform'],
            version: [1],
            description: 'Retrieve context from vector store',
            defaults: {
                name: 'Vector Store Tool',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Tools'],
                    Tools: ['Other Tools'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolvectorstore/',
                        },
                    ],
                },
            },
            inputs: [
                {
                    displayName: 'Vector Store',
                    maxConnections: 1,
                    type: "ai_vectorStore",
                    required: true,
                },
                {
                    displayName: 'Model',
                    maxConnections: 1,
                    type: "ai_languageModel",
                    required: true,
                },
            ],
            outputs: ["ai_tool"],
            outputNames: ['Tool'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_agent"]),
                {
                    displayName: 'Name',
                    name: 'name',
                    type: 'string',
                    default: '',
                    placeholder: 'e.g. company_knowledge_base',
                    validateType: 'string-alphanumeric',
                    description: 'Name of the vector store',
                },
                {
                    displayName: 'Description',
                    name: 'description',
                    type: 'string',
                    default: '',
                    placeholder: 'Retrieves data about [insert information about your data here]...',
                    typeOptions: {
                        rows: 3,
                    },
                },
                {
                    displayName: 'Limit',
                    name: 'topK',
                    type: 'number',
                    default: 4,
                    description: 'The maximum number of results to return',
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const name = this.getNodeParameter('name', itemIndex);
        const toolDescription = this.getNodeParameter('description', itemIndex);
        const topK = this.getNodeParameter('topK', itemIndex, 4);
        const vectorStore = (await this.getInputConnectionData("ai_vectorStore", itemIndex));
        const llm = (await this.getInputConnectionData("ai_languageModel", 0));
        const description = tools_1.VectorStoreQATool.getDescription(name, toolDescription);
        const vectorStoreTool = new tools_1.VectorStoreQATool(name, description, {
            llm,
            vectorStore,
        });
        vectorStoreTool.chain = chains_1.VectorDBQAChain.fromLLM(llm, vectorStore, {
            k: topK,
        });
        return {
            response: (0, logWrapper_1.logWrapper)(vectorStoreTool, this),
        };
    }
}
exports.ToolVectorStore = ToolVectorStore;
//# sourceMappingURL=ToolVectorStore.node.js.map