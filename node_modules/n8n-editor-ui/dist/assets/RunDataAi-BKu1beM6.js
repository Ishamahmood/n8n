import { iC as baseSlice, iD as toString, d as defineComponent, da as useClipboard, a as useToast, iE as useAIAssistantHelpers, c_ as useNodeTypesStore, ap as useNDVStore, Z as useRootStore, iw as useAssistantStore, K as useUIStore, p as computed, c as openBlock, h as createElementBlock, j as createBaseVNode, t as toDisplayString, as as withDirectives, f as createCommentVNode, i as createVNode, iF as InlineAskAssistantButton, A as unref, w as withCtx, k as createTextVNode, F as Fragment, z as renderList, g as useI18n, e2 as MAX_DISPLAY_DATA_SIZE, d5 as isCommunityPackageName, iG as NEW_ASSISTANT_SESSION_MODAL, l as resolveComponent, ca as resolveDirective, hk as sanitizeHtml, d9 as NodeConnectionType, iH as isObjectEmpty, r as ref, o as onMounted, n as normalizeClass, e as createBlock, I as withModifiers, iI as VueMarkdown, iJ as HighlightJS, _ as _export_sfc, T as useWorkflowsStore, d4 as _sfc_main$4, H as watch, B as normalizeStyle, iK as ElTree } from "./index-7YFQEQmt.js";
function castSlice(array, start, end) {
  var length = array.length;
  end = end === void 0 ? length : end;
  return !start && end >= length ? array : baseSlice(array, start, end);
}
var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1, rsVarRange$1 = "\\ufe0e\\ufe0f";
var rsZWJ$1 = "\\u200d";
var reHasUnicode = RegExp("[" + rsZWJ$1 + rsAstralRange$1 + rsComboRange$1 + rsVarRange$1 + "]");
function hasUnicode(string) {
  return reHasUnicode.test(string);
}
function asciiToArray(string) {
  return string.split("");
}
var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}
function stringToArray(string) {
  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);
    var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
    return chr[methodName]() + trailing;
  };
}
var upperFirst = createCaseFirst("toUpperCase");
function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}
const _hoisted_1$3 = { class: "node-error-view" };
const _hoisted_2$3 = { class: "node-error-view__header" };
const _hoisted_3$1 = {
  class: "node-error-view__header-message",
  "data-test-id": "node-error-message"
};
const _hoisted_4 = {
  key: 0,
  "data-test-id": "node-error-description",
  class: "node-error-view__header-description"
};
const _hoisted_5 = {
  key: 1,
  class: "node-error-view__assistant-button",
  "data-test-id": "node-error-view-ask-assistant-button"
};
const _hoisted_6 = {
  key: 0,
  class: "node-error-view__info"
};
const _hoisted_7 = { class: "node-error-view__info-header" };
const _hoisted_8 = { class: "node-error-view__info-title" };
const _hoisted_9 = { class: "copy-button" };
const _hoisted_10 = { class: "node-error-view__info-content" };
const _hoisted_11 = {
  key: 0,
  class: "node-error-view__details"
};
const _hoisted_12 = { class: "node-error-view__details-summary" };
const _hoisted_13 = { class: "node-error-view__details-content" };
const _hoisted_14 = {
  key: 0,
  class: "node-error-view__details-row"
};
const _hoisted_15 = { class: "node-error-view__details-label" };
const _hoisted_16 = { class: "node-error-view__details-value" };
const _hoisted_17 = {
  key: 1,
  class: "node-error-view__details-row"
};
const _hoisted_18 = { class: "node-error-view__details-label" };
const _hoisted_19 = { class: "node-error-view__details-value" };
const _hoisted_20 = {
  key: 2,
  class: "node-error-view__details-row"
};
const _hoisted_21 = { class: "node-error-view__details-label" };
const _hoisted_22 = { class: "node-error-view__details-value" };
const _hoisted_23 = {
  key: 3,
  class: "node-error-view__details-row"
};
const _hoisted_24 = { class: "node-error-view__details-label" };
const _hoisted_25 = { class: "node-error-view__details-value" };
const _hoisted_26 = {
  key: 4,
  class: "node-error-view__details-row"
};
const _hoisted_27 = { class: "node-error-view__details-label" };
const _hoisted_28 = { class: "node-error-view__details-value" };
const _hoisted_29 = { class: "node-error-view__details" };
const _hoisted_30 = { class: "node-error-view__details-summary" };
const _hoisted_31 = { class: "node-error-view__details-content" };
const _hoisted_32 = {
  key: 0,
  class: "node-error-view__details-row"
};
const _hoisted_33 = { class: "node-error-view__details-label" };
const _hoisted_34 = { class: "node-error-view__details-value" };
const _hoisted_35 = {
  key: 1,
  class: "node-error-view__details-row"
};
const _hoisted_36 = { class: "node-error-view__details-label" };
const _hoisted_37 = { class: "node-error-view__details-value" };
const _hoisted_38 = {
  key: 2,
  class: "node-error-view__details-row"
};
const _hoisted_39 = { class: "node-error-view__details-label" };
const _hoisted_40 = { class: "node-error-view__details-value" };
const _hoisted_41 = {
  key: 3,
  class: "node-error-view__details-row"
};
const _hoisted_42 = { class: "node-error-view__details-label" };
const _hoisted_43 = { class: "node-error-view__details-value" };
const _hoisted_44 = {
  key: 4,
  class: "node-error-view__details-row"
};
const _hoisted_45 = { class: "node-error-view__details-label" };
const _hoisted_46 = { class: "node-error-view__details-value" };
const _hoisted_47 = { class: "node-error-view__details-row" };
const _hoisted_48 = { class: "node-error-view__details-label" };
const _hoisted_49 = { class: "node-error-view__details-value" };
const _hoisted_50 = {
  key: 5,
  class: "node-error-view__details-row"
};
const _hoisted_51 = { class: "node-error-view__details-label" };
const _hoisted_52 = { class: "node-error-view__details-value" };
const _hoisted_53 = {
  key: 6,
  class: "node-error-view__details-row"
};
const _hoisted_54 = { class: "node-error-view__details-label" };
const _hoisted_55 = { class: "node-error-view__details-value" };
const _hoisted_56 = {
  key: 7,
  class: "node-error-view__details-row"
};
const _hoisted_57 = { class: "node-error-view__details-label" };
const _hoisted_58 = { class: "node-error-view__details-value" };
const _hoisted_59 = {
  key: 8,
  class: "node-error-view__details-row"
};
const _hoisted_60 = { class: "node-error-view__details-label" };
const _hoisted_61 = { class: "node-error-view__details-value" };
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "NodeErrorView",
  props: {
    error: {},
    compact: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const clipboard = useClipboard();
    const toast = useToast();
    const i18n = useI18n();
    const assistantHelpers = useAIAssistantHelpers();
    const nodeTypesStore = useNodeTypesStore();
    const ndvStore = useNDVStore();
    const rootStore = useRootStore();
    const assistantStore = useAssistantStore();
    const uiStore = useUIStore();
    const displayCause = computed(() => {
      return JSON.stringify(props.error.cause ?? "").length < MAX_DISPLAY_DATA_SIZE;
    });
    const node = computed(() => {
      return props.error.node || ndvStore.activeNode;
    });
    const parameters = computed(() => {
      if (!node.value) {
        return [];
      }
      const nodeType = nodeTypesStore.getNodeType(node.value.type, node.value.typeVersion);
      if (nodeType === null) {
        return [];
      }
      return nodeType.properties;
    });
    const n8nVersion = computed(() => {
      const baseUrl = rootStore.urlBaseEditor;
      let instanceType = "Self Hosted";
      if (baseUrl.includes("n8n.cloud")) {
        instanceType = "Cloud";
      }
      return rootStore.versionCli + ` (${instanceType})`;
    });
    const hasManyInputItems = computed(() => {
      return ndvStore.ndvInputData.length > 1;
    });
    const nodeDefaultName = computed(() => {
      var _a;
      if (!node.value) {
        return "Node";
      }
      const nodeType = nodeTypesStore.getNodeType(node.value.type, node.value.typeVersion);
      return ((_a = nodeType == null ? void 0 : nodeType.defaults) == null ? void 0 : _a.name) || node.value.name;
    });
    const prepareRawMessages = computed(() => {
      var _a;
      const returnData = [];
      if (!((_a = props.error.messages) == null ? void 0 : _a.length)) {
        return [];
      }
      const errorMessage = getErrorMessage();
      Array.from(new Set(props.error.messages)).forEach((message) => {
        const isParsable = /^\d{3} - \{/.test(message);
        const parts = isParsable ? message.split(" - ").map((part) => part.trim()) : [];
        for (const part of parts) {
          try {
            const parsed = JSON.parse(part);
            if (typeof parsed === "object") {
              returnData.push(parsed);
              return;
            }
          } catch (error2) {
          }
        }
        if (message === errorMessage) return;
        returnData.push(message);
      });
      return returnData;
    });
    const isAskAssistantAvailable = computed(() => {
      if (!node.value) {
        return false;
      }
      const isCustomNode = node.value.type === void 0 || isCommunityPackageName(node.value.type);
      return assistantStore.canShowAssistantButtonsOnCanvas && !isCustomNode && !nodeIsHidden();
    });
    const assistantAlreadyAsked = computed(() => {
      return assistantStore.isNodeErrorActive({
        error: assistantHelpers.simplifyErrorForAssistant(props.error),
        node: props.error.node || ndvStore.activeNode
      });
    });
    function nodeVersionTag(nodeType) {
      if (!nodeType || "hidden" in nodeType && nodeType.hidden) {
        return i18n.baseText("nodeSettings.deprecated");
      }
      const latestNodeVersion = Math.max(...nodeTypesStore.getNodeVersions(nodeType.type));
      if (latestNodeVersion === nodeType.typeVersion) {
        return i18n.baseText("nodeSettings.latest");
      }
      return i18n.baseText("nodeSettings.latestVersion", {
        interpolate: { version: latestNodeVersion.toString() }
      });
    }
    function prepareDescription(description) {
      return sanitizeHtml(description.replace(/`(.*?)`/g, "<code>$1</code>"));
    }
    function getErrorDescription() {
      var _a, _b;
      const isSubNodeError = props.error.name === "NodeOperationError" && props.error.functionality === "configuration-node";
      if (isSubNodeError) {
        return prepareDescription(
          props.error.description + i18n.baseText("pushConnection.executionError.openNode", {
            interpolate: { node: props.error.node.name }
          })
        );
      }
      if ((_a = props.error.context) == null ? void 0 : _a.descriptionKey) {
        const interpolate = {
          nodeCause: props.error.context.nodeCause,
          runIndex: props.error.context.runIndex ?? "0",
          itemIndex: props.error.context.itemIndex ?? "0"
        };
        return prepareDescription(
          i18n.baseText(
            `nodeErrorView.description.${props.error.context.descriptionKey}`,
            { interpolate }
          )
        );
      }
      if (!((_b = props.error.context) == null ? void 0 : _b.descriptionTemplate)) {
        return prepareDescription(props.error.description ?? "");
      }
      const parameterName = parameterDisplayName(props.error.context.parameter);
      return prepareDescription(
        props.error.context.descriptionTemplate.replace(/%%PARAMETER%%/g, parameterName)
      );
    }
    function addItemIndexSuffix(message) {
      var _a, _b;
      let itemIndexSuffix = "";
      if (hasManyInputItems.value && ((_b = (_a = props.error) == null ? void 0 : _a.context) == null ? void 0 : _b.itemIndex) !== void 0) {
        itemIndexSuffix = `item ${props.error.context.itemIndex}`;
      }
      if (message.includes(itemIndexSuffix)) return message;
      return `${message} [${itemIndexSuffix}]`;
    }
    function getErrorMessage() {
      var _a, _b, _c;
      let message = "";
      const isSubNodeError = props.error.name === "NodeOperationError" && props.error.functionality === "configuration-node";
      const isNonEmptyString = (value) => !!value && typeof value === "string";
      if (isSubNodeError) {
        message = i18n.baseText("nodeErrorView.errorSubNode", {
          interpolate: { node: props.error.node.name }
        });
      } else if (isNonEmptyString(props.error.message) && (props.error.message === props.error.description || !((_a = props.error.context) == null ? void 0 : _a.messageTemplate))) {
        message = props.error.message;
      } else if (isNonEmptyString((_b = props.error.context) == null ? void 0 : _b.messageTemplate) && isNonEmptyString((_c = props.error.context) == null ? void 0 : _c.parameter)) {
        const parameterName = parameterDisplayName(props.error.context.parameter);
        message = props.error.context.messageTemplate.replace(/%%PARAMETER%%/g, parameterName);
      } else if (Array.isArray(props.error.messages) && props.error.messages.length > 0) {
        message = props.error.messages[0];
      }
      return addItemIndexSuffix(message);
    }
    function parameterDisplayName(path, fullPath = true) {
      try {
        const params = getParameterName(parameters.value, path.split("."));
        if (!params.length) {
          throw new Error();
        }
        if (!fullPath) {
          return params.pop().displayName;
        }
        return params.map((parameter) => parameter.displayName).join(" > ");
      } catch (error2) {
        return `Could not find parameter "${path}"`;
      }
    }
    function getParameterName(params, pathParts) {
      let currentParameterName = pathParts.shift();
      if (currentParameterName === void 0) {
        return [];
      }
      const arrayMatch = currentParameterName.match(/(.*)\[([\d])\]$/);
      if (arrayMatch !== null && arrayMatch.length > 0) {
        currentParameterName = arrayMatch[1];
      }
      const currentParameter = params.find(
        (parameter) => parameter.name === currentParameterName
      );
      if (currentParameter === void 0) {
        throw new Error(`Could not find parameter "${currentParameterName}"`);
      }
      if (pathParts.length === 0) {
        return [currentParameter];
      }
      if (currentParameter.hasOwnProperty("options")) {
        return [
          currentParameter,
          ...getParameterName(currentParameter.options, pathParts)
        ];
      }
      if (currentParameter.hasOwnProperty("values")) {
        return [
          currentParameter,
          ...getParameterName(currentParameter.values, pathParts)
        ];
      }
      return [currentParameter];
    }
    function copyErrorDetails() {
      var _a, _b, _c, _d, _e, _f;
      const error2 = props.error;
      const errorInfo = {
        errorMessage: getErrorMessage()
      };
      if (error2.description) {
        errorInfo.errorDescription = error2.description;
      }
      const errorDetails = {};
      if ((_a = error2 == null ? void 0 : error2.messages) == null ? void 0 : _a.length) {
        errorDetails.rawErrorMessage = error2.messages;
      }
      if ("httpCode" in error2 && error2.httpCode) {
        errorDetails.httpCode = error2.httpCode;
      }
      if (error2.context && error2.context.data) {
        errorDetails.errorData = error2.context.data;
      }
      if (error2.extra) {
        errorDetails.errorExtra = error2.extra;
      }
      errorInfo.errorDetails = errorDetails;
      const n8nDetails = {};
      if (error2.node) {
        n8nDetails.nodeName = error2.node.name;
        n8nDetails.nodeType = error2.node.type;
        n8nDetails.nodeVersion = error2.node.typeVersion;
        if ((_c = (_b = error2.node) == null ? void 0 : _b.parameters) == null ? void 0 : _c.resource) {
          n8nDetails.resource = error2.node.parameters.resource;
        }
        if ((_e = (_d = error2 == null ? void 0 : error2.node) == null ? void 0 : _d.parameters) == null ? void 0 : _e.operation) {
          n8nDetails.operation = error2.node.parameters.operation;
        }
      }
      if (error2.context) {
        if (error2.context.itemIndex !== void 0) {
          n8nDetails.itemIndex = error2.context.itemIndex;
        }
        if (error2.context.runIndex !== void 0) {
          n8nDetails.runIndex = error2.context.runIndex;
        }
        if (error2.context.parameter !== void 0) {
          n8nDetails.parameter = error2.context.parameter;
        }
        if (error2.context.causeDetailed) {
          n8nDetails.causeDetailed = error2.context.causeDetailed;
        }
      }
      if (error2.timestamp) {
        n8nDetails.time = new Date(error2.timestamp).toLocaleString();
      }
      n8nDetails.n8nVersion = n8nVersion.value;
      n8nDetails.binaryDataMode = rootStore.binaryDataMode;
      if (error2.cause) {
        n8nDetails.cause = error2.cause;
      }
      n8nDetails.stackTrace = (_f = error2.stack) == null ? void 0 : _f.split("\n");
      errorInfo.n8nDetails = n8nDetails;
      void clipboard.copy(JSON.stringify(errorInfo, null, 2));
      copySuccess();
    }
    function copySuccess() {
      toast.showMessage({
        title: i18n.baseText("nodeErrorView.showMessage.title"),
        type: "info"
      });
    }
    function nodeIsHidden() {
      const nodeType = nodeTypesStore.getNodeType(node == null ? void 0 : node.value.type);
      return (nodeType == null ? void 0 : nodeType.hidden) ?? false;
    }
    async function onAskAssistantClick() {
      const { message, lineNumber, description } = props.error;
      const sessionInProgress = !assistantStore.isSessionEnded;
      const errorHelp = {
        error: {
          name: props.error.name,
          message,
          lineNumber,
          description: description ?? getErrorDescription(),
          type: "type" in props.error ? props.error.type : void 0
        },
        node: node.value
      };
      if (sessionInProgress) {
        uiStore.openModalWithData({
          name: NEW_ASSISTANT_SESSION_MODAL,
          data: { context: { errorHelp } }
        });
        return;
      }
      await assistantStore.initErrorHelper(errorHelp);
      assistantStore.trackUserOpenedAssistant({
        source: "error",
        task: "error",
        has_existing_session: false
      });
    }
    return (_ctx, _cache) => {
      var _a, _b, _c, _d, _e;
      const _component_n8n_icon_button = resolveComponent("n8n-icon-button");
      const _component_n8n_tooltip = resolveComponent("n8n-tooltip");
      const _component_font_awesome_icon = resolveComponent("font-awesome-icon");
      const _directive_n8n_html = resolveDirective("n8n-html");
      return openBlock(), createElementBlock("div", _hoisted_1$3, [
        createBaseVNode("div", _hoisted_2$3, [
          createBaseVNode("div", _hoisted_3$1, [
            createBaseVNode("div", null, toDisplayString(getErrorMessage()), 1)
          ]),
          _ctx.error.description || ((_a = _ctx.error.context) == null ? void 0 : _a.descriptionKey) ? withDirectives((openBlock(), createElementBlock("div", _hoisted_4, null, 512)), [
            [_directive_n8n_html, getErrorDescription()]
          ]) : createCommentVNode("", true),
          isAskAssistantAvailable.value ? (openBlock(), createElementBlock("div", _hoisted_5, [
            createVNode(InlineAskAssistantButton, {
              asked: assistantAlreadyAsked.value,
              onClick: onAskAssistantClick
            }, null, 8, ["asked"])
          ])) : createCommentVNode("", true)
        ]),
        !_ctx.compact ? (openBlock(), createElementBlock("div", _hoisted_6, [
          createBaseVNode("div", _hoisted_7, [
            createBaseVNode("p", _hoisted_8, toDisplayString(unref(i18n).baseText("nodeErrorView.details.title")), 1),
            createVNode(_component_n8n_tooltip, {
              class: "item",
              content: unref(i18n).baseText("nodeErrorView.copyToClipboard.tooltip"),
              placement: "left"
            }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_9, [
                  createVNode(_component_n8n_icon_button, {
                    icon: "copy",
                    type: "secondary",
                    size: "mini",
                    text: "true",
                    "transparent-background": "transparent",
                    onClick: copyErrorDetails
                  })
                ])
              ]),
              _: 1
            }, 8, ["content"])
          ]),
          createBaseVNode("div", _hoisted_10, [
            "httpCode" in _ctx.error && _ctx.error.httpCode || prepareRawMessages.value.length || ((_c = (_b = _ctx.error) == null ? void 0 : _b.context) == null ? void 0 : _c.data) || _ctx.error.extra ? (openBlock(), createElementBlock("details", _hoisted_11, [
              createBaseVNode("summary", _hoisted_12, [
                createVNode(_component_font_awesome_icon, {
                  class: "node-error-view__details-icon",
                  icon: "angle-right"
                }),
                createTextVNode(" " + toDisplayString(unref(i18n).baseText("nodeErrorView.details.from", {
                  interpolate: { node: `${nodeDefaultName.value}` }
                })), 1)
              ]),
              createBaseVNode("div", _hoisted_13, [
                "httpCode" in _ctx.error && _ctx.error.httpCode ? (openBlock(), createElementBlock("div", _hoisted_14, [
                  createBaseVNode("p", _hoisted_15, toDisplayString(unref(i18n).baseText("nodeErrorView.errorCode")), 1),
                  createBaseVNode("p", _hoisted_16, [
                    createBaseVNode("code", null, toDisplayString(_ctx.error.httpCode), 1)
                  ])
                ])) : createCommentVNode("", true),
                prepareRawMessages.value.length ? (openBlock(), createElementBlock("div", _hoisted_17, [
                  createBaseVNode("p", _hoisted_18, toDisplayString(unref(i18n).baseText("nodeErrorView.details.rawMessages")), 1),
                  createBaseVNode("div", _hoisted_19, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(prepareRawMessages.value, (msg, index) => {
                      return openBlock(), createElementBlock("div", { key: index }, [
                        createBaseVNode("pre", null, [
                          createBaseVNode("code", null, toDisplayString(msg), 1)
                        ])
                      ]);
                    }), 128))
                  ])
                ])) : createCommentVNode("", true),
                ((_e = (_d = _ctx.error) == null ? void 0 : _d.context) == null ? void 0 : _e.data) ? (openBlock(), createElementBlock("div", _hoisted_20, [
                  createBaseVNode("p", _hoisted_21, toDisplayString(unref(i18n).baseText("nodeErrorView.details.errorData")), 1),
                  createBaseVNode("div", _hoisted_22, [
                    createBaseVNode("pre", null, [
                      createBaseVNode("code", null, toDisplayString(_ctx.error.context.data), 1)
                    ])
                  ])
                ])) : createCommentVNode("", true),
                _ctx.error.extra ? (openBlock(), createElementBlock("div", _hoisted_23, [
                  createBaseVNode("p", _hoisted_24, toDisplayString(unref(i18n).baseText("nodeErrorView.details.errorExtra")), 1),
                  createBaseVNode("div", _hoisted_25, [
                    createBaseVNode("pre", null, [
                      createBaseVNode("code", null, toDisplayString(_ctx.error.extra), 1)
                    ])
                  ])
                ])) : createCommentVNode("", true),
                _ctx.error.context && _ctx.error.context.request ? (openBlock(), createElementBlock("div", _hoisted_26, [
                  createBaseVNode("p", _hoisted_27, toDisplayString(unref(i18n).baseText("nodeErrorView.details.request")), 1),
                  createBaseVNode("div", _hoisted_28, [
                    createBaseVNode("pre", null, [
                      createBaseVNode("code", null, toDisplayString(_ctx.error.context.request), 1)
                    ])
                  ])
                ])) : createCommentVNode("", true)
              ])
            ])) : createCommentVNode("", true),
            createBaseVNode("details", _hoisted_29, [
              createBaseVNode("summary", _hoisted_30, [
                createVNode(_component_font_awesome_icon, {
                  class: "node-error-view__details-icon",
                  icon: "angle-right"
                }),
                createTextVNode(" " + toDisplayString(unref(i18n).baseText("nodeErrorView.details.info")), 1)
              ]),
              createBaseVNode("div", _hoisted_31, [
                _ctx.error.context && _ctx.error.context.itemIndex !== void 0 ? (openBlock(), createElementBlock("div", _hoisted_32, [
                  createBaseVNode("p", _hoisted_33, toDisplayString(unref(i18n).baseText("nodeErrorView.itemIndex")), 1),
                  createBaseVNode("p", _hoisted_34, [
                    createBaseVNode("code", null, toDisplayString(_ctx.error.context.itemIndex), 1)
                  ])
                ])) : createCommentVNode("", true),
                _ctx.error.context && _ctx.error.context.runIndex !== void 0 ? (openBlock(), createElementBlock("div", _hoisted_35, [
                  createBaseVNode("p", _hoisted_36, toDisplayString(unref(i18n).baseText("nodeErrorView.runIndex")), 1),
                  createBaseVNode("p", _hoisted_37, [
                    createBaseVNode("code", null, toDisplayString(_ctx.error.context.runIndex), 1)
                  ])
                ])) : createCommentVNode("", true),
                _ctx.error.context && _ctx.error.context.parameter !== void 0 ? (openBlock(), createElementBlock("div", _hoisted_38, [
                  createBaseVNode("p", _hoisted_39, toDisplayString(unref(i18n).baseText("nodeErrorView.inParameter")), 1),
                  createBaseVNode("p", _hoisted_40, [
                    createBaseVNode("code", null, toDisplayString(parameterDisplayName(`${_ctx.error.context.parameter}`)), 1)
                  ])
                ])) : createCommentVNode("", true),
                _ctx.error.node && _ctx.error.node.type ? (openBlock(), createElementBlock("div", _hoisted_41, [
                  createBaseVNode("p", _hoisted_42, toDisplayString(unref(i18n).baseText("nodeErrorView.details.nodeType")), 1),
                  createBaseVNode("p", _hoisted_43, [
                    createBaseVNode("code", null, toDisplayString(_ctx.error.node.type), 1)
                  ])
                ])) : createCommentVNode("", true),
                _ctx.error.node && _ctx.error.node.typeVersion ? (openBlock(), createElementBlock("div", _hoisted_44, [
                  createBaseVNode("p", _hoisted_45, toDisplayString(unref(i18n).baseText("nodeErrorView.details.nodeVersion")), 1),
                  createBaseVNode("p", _hoisted_46, [
                    createBaseVNode("code", null, [
                      createBaseVNode("span", null, toDisplayString(_ctx.error.node.typeVersion + " "), 1),
                      createBaseVNode("span", null, "(" + toDisplayString(nodeVersionTag(_ctx.error.node)) + ")", 1)
                    ])
                  ])
                ])) : createCommentVNode("", true),
                createBaseVNode("div", _hoisted_47, [
                  createBaseVNode("p", _hoisted_48, toDisplayString(unref(i18n).baseText("nodeErrorView.details.n8nVersion")), 1),
                  createBaseVNode("p", _hoisted_49, [
                    createBaseVNode("code", null, toDisplayString(n8nVersion.value), 1)
                  ])
                ]),
                _ctx.error.timestamp ? (openBlock(), createElementBlock("div", _hoisted_50, [
                  createBaseVNode("p", _hoisted_51, toDisplayString(unref(i18n).baseText("nodeErrorView.time")), 1),
                  createBaseVNode("p", _hoisted_52, [
                    createBaseVNode("code", null, toDisplayString(new Date(_ctx.error.timestamp).toLocaleString()), 1)
                  ])
                ])) : createCommentVNode("", true),
                _ctx.error.cause && displayCause.value ? (openBlock(), createElementBlock("div", _hoisted_53, [
                  createBaseVNode("p", _hoisted_54, toDisplayString(unref(i18n).baseText("nodeErrorView.details.errorCause")), 1),
                  createBaseVNode("pre", _hoisted_55, [
                    createBaseVNode("code", null, toDisplayString(_ctx.error.cause), 1)
                  ])
                ])) : createCommentVNode("", true),
                _ctx.error.context && _ctx.error.context.causeDetailed ? (openBlock(), createElementBlock("div", _hoisted_56, [
                  createBaseVNode("p", _hoisted_57, toDisplayString(unref(i18n).baseText("nodeErrorView.details.causeDetailed")), 1),
                  createBaseVNode("pre", _hoisted_58, [
                    createBaseVNode("code", null, toDisplayString(_ctx.error.context.causeDetailed), 1)
                  ])
                ])) : createCommentVNode("", true),
                _ctx.error.stack ? (openBlock(), createElementBlock("div", _hoisted_59, [
                  createBaseVNode("p", _hoisted_60, toDisplayString(unref(i18n).baseText("nodeErrorView.details.stackTrace")), 1),
                  createBaseVNode("pre", _hoisted_61, [
                    createBaseVNode("code", null, toDisplayString(_ctx.error.stack), 1)
                  ])
                ])) : createCommentVNode("", true)
              ])
            ])
          ])
        ])) : createCommentVNode("", true)
      ]);
    };
  }
});
const fallbackParser = (execData) => ({
  type: "json",
  data: execData,
  parsed: false
});
const outputTypeParsers = {
  [NodeConnectionType.AiLanguageModel](execData) {
    const response = execData.response ?? execData;
    if (!response) throw new Error("No response from Language Model");
    if (Array.isArray(response == null ? void 0 : response.messages) && (response == null ? void 0 : response.messages.length) === 1 && typeof (response == null ? void 0 : response.messages[0]) === "string") {
      return {
        type: "text",
        data: response.messages[0],
        parsed: true
      };
    }
    if (response.messages && Array.isArray(response.messages)) {
      return outputTypeParsers[NodeConnectionType.AiMemory](execData);
    }
    if (response.generations) {
      const generations = response.generations;
      const content = generations.map((generation) => {
        if (generation == null ? void 0 : generation.text) return generation.text;
        if (Array.isArray(generation)) {
          return generation.map((item) => item.text ?? item).join("\n\n").trim();
        }
        return generation;
      });
      return {
        type: "json",
        data: content,
        parsed: true
      };
    }
    return {
      type: "json",
      data: response,
      parsed: true
    };
  },
  [NodeConnectionType.AiTool]: fallbackParser,
  [NodeConnectionType.AiAgent]: fallbackParser,
  [NodeConnectionType.AiMemory](execData) {
    var _a;
    const chatHistory = execData.chatHistory ?? execData.messages ?? ((_a = execData == null ? void 0 : execData.response) == null ? void 0 : _a.chat_history);
    if (Array.isArray(chatHistory)) {
      const responseText = chatHistory.map((content) => {
        var _a2;
        if (content.type === "constructor" && ((_a2 = content.id) == null ? void 0 : _a2.includes("messages")) && content.kwargs) {
          let message = content.kwargs.content;
          if (Array.isArray(message)) {
            message = message.map((item) => {
              const { type, image_url } = item;
              if (type === "image_url" && typeof image_url === "object" && typeof image_url.url === "string") {
                return `![Input image](${image_url.url})`;
              } else if (typeof image_url === "string") {
                return `![Input image](${image_url})`;
              }
              return item.text;
            }).join("\n");
          }
          if (Object.keys(content.kwargs.additional_kwargs).length) {
            message += ` (${JSON.stringify(content.kwargs.additional_kwargs)})`;
          }
          if (content.id.includes("HumanMessage")) {
            message = `**Human:** ${String(message).trim()}`;
          } else if (content.id.includes("AIMessage")) {
            message = `**AI:** ${message}`;
          } else if (content.id.includes("SystemMessage")) {
            message = `**System Message:** ${message}`;
          }
          if (execData.action && typeof execData.action !== "object" && execData.action !== "getMessages") {
            message = `## Action: ${execData.action}

${message}`;
          }
          return message;
        }
        return "";
      }).join("\n\n");
      return {
        type: "markdown",
        data: responseText,
        parsed: true
      };
    }
    return fallbackParser(execData);
  },
  [NodeConnectionType.AiOutputParser]: fallbackParser,
  [NodeConnectionType.AiRetriever]: fallbackParser,
  [NodeConnectionType.AiVectorStore](execData) {
    if (execData.documents) {
      return {
        type: "json",
        data: execData.documents,
        parsed: true
      };
    }
    return fallbackParser(execData);
  },
  [NodeConnectionType.AiEmbedding](execData) {
    if (execData.documents) {
      return {
        type: "json",
        data: execData.documents,
        parsed: true
      };
    }
    return fallbackParser(execData);
  },
  [NodeConnectionType.AiDocument](execData) {
    if (execData.documents) {
      return {
        type: "json",
        data: execData.documents,
        parsed: true
      };
    }
    return fallbackParser(execData);
  },
  [NodeConnectionType.AiTextSplitter](execData) {
    const arrayData = Array.isArray(execData.response) ? execData.response : [execData.textSplitter];
    return {
      type: "text",
      data: arrayData.join("\n\n"),
      parsed: true
    };
  }
};
const useAiContentParsers = () => {
  const parseAiRunData = (executionData, endpointType) => {
    if ([NodeConnectionType.AiChain, NodeConnectionType.Main].includes(endpointType)) {
      return executionData.map((data) => ({ raw: data.json, parsedContent: null }));
    }
    const contentJson = executionData.map((node) => {
      const hasBinaryData = !isObjectEmpty(node.binary);
      return hasBinaryData ? node.binary : node.json;
    });
    const parser = outputTypeParsers[endpointType];
    if (!parser)
      return [
        {
          raw: contentJson.filter((item) => item !== void 0),
          parsedContent: null
        }
      ];
    const parsedOutput = contentJson.filter((c) => c !== void 0).map((c) => ({ raw: c, parsedContent: parser(c) }));
    return parsedOutput;
  };
  return {
    parseAiRunData
  };
};
const _hoisted_1$2 = ["data-content-type"];
const _hoisted_2$2 = ["textContent"];
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "AiRunContentBlock",
  props: {
    runData: {},
    error: {}
  },
  setup(__props) {
    const props = __props;
    const i18n = useI18n();
    const clipboard = useClipboard();
    const { showMessage } = useToast();
    const contentParsers = useAiContentParsers();
    const isExpanded = ref(getInitialExpandedState());
    const isShowRaw = ref(false);
    const contentParsed = ref(false);
    const parsedRun = ref(void 0);
    function getInitialExpandedState() {
      const collapsedTypes = {
        input: [NodeConnectionType.AiDocument, NodeConnectionType.AiTextSplitter],
        output: [
          NodeConnectionType.AiDocument,
          NodeConnectionType.AiEmbedding,
          NodeConnectionType.AiTextSplitter,
          NodeConnectionType.AiVectorStore
        ]
      };
      return !collapsedTypes[props.runData.inOut].includes(props.runData.type);
    }
    function isJsonString(text) {
      try {
        JSON.parse(text);
        return true;
      } catch (e) {
        return false;
      }
    }
    const markdownOptions = {
      highlight(str, lang) {
        if (lang && HighlightJS.getLanguage(lang)) {
          try {
            return HighlightJS.highlight(str, { language: lang }).value;
          } catch {
          }
        }
        return "";
      }
    };
    function parseAiRunData(run) {
      if (!run.data) {
        return;
      }
      const parsedData = contentParsers.parseAiRunData(run.data, run.type);
      return parsedData;
    }
    function isMarkdown(content) {
      if (typeof content !== "string") return false;
      const markdownPatterns = [
        /^# .+/gm,
        // headers
        /\*{1,2}.+\*{1,2}/g,
        // emphasis and strong
        /\[.+\]\(.+\)/g,
        // links
        /```[\s\S]+```/g
        // code blocks
      ];
      return markdownPatterns.some((pattern) => pattern.test(content));
    }
    function formatToJsonMarkdown(data) {
      return "```json\n" + data + "\n```";
    }
    function jsonToMarkdown(data) {
      if (isMarkdown(data)) return data;
      if (Array.isArray(data) && data.length && typeof data[0] !== "number") {
        const markdownArray = data.map((item) => jsonToMarkdown(item));
        return markdownArray.join("\n\n").trim();
      }
      if (typeof data === "string") {
        if (isJsonString(data)) {
          return formatToJsonMarkdown(data);
        }
        return data;
      }
      return formatToJsonMarkdown(JSON.stringify(data, null, 2));
    }
    function setContentParsed(content) {
      contentParsed.value = !!content.find((item) => {
        var _a;
        if (((_a = item.parsedContent) == null ? void 0 : _a.parsed) === true) {
          return true;
        }
        return false;
      });
    }
    function onBlockHeaderClick() {
      isExpanded.value = !isExpanded.value;
    }
    function onCopyToClipboard(content) {
      try {
        void clipboard.copy(JSON.stringify(content, void 0, 2));
        showMessage({
          title: i18n.baseText("generic.copiedToClipboard"),
          type: "success"
        });
      } catch (err) {
      }
    }
    onMounted(() => {
      parsedRun.value = parseAiRunData(props.runData);
      if (parsedRun.value) {
        setContentParsed(parsedRun.value);
      }
    });
    return (_ctx, _cache) => {
      const _component_font_awesome_icon = resolveComponent("font-awesome-icon");
      const _component_el_switch = resolveComponent("el-switch");
      const _component_NodeErrorView = _sfc_main$3;
      const _component_n8n_icon_button = resolveComponent("n8n-icon-button");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.$style.block)
      }, [
        createBaseVNode("header", {
          class: normalizeClass(_ctx.$style.blockHeader),
          onClick: onBlockHeaderClick
        }, [
          createBaseVNode("button", {
            class: normalizeClass(_ctx.$style.blockToggle)
          }, [
            createVNode(_component_font_awesome_icon, {
              icon: isExpanded.value ? "angle-down" : "angle-up",
              size: "lg"
            }, null, 8, ["icon"])
          ], 2),
          createBaseVNode("p", {
            class: normalizeClass(_ctx.$style.blockTitle)
          }, toDisplayString(unref(capitalize)(_ctx.runData.inOut)), 3),
          contentParsed.value && !_ctx.error ? (openBlock(), createBlock(_component_el_switch, {
            key: 0,
            modelValue: isShowRaw.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isShowRaw.value = $event),
            class: normalizeClass(_ctx.$style.rawSwitch),
            "active-text": "RAW JSON",
            onClick: _cache[1] || (_cache[1] = withModifiers(() => {
            }, ["stop"]))
          }, null, 8, ["modelValue", "class"])) : createCommentVNode("", true)
        ], 2),
        createBaseVNode("main", {
          class: normalizeClass({
            [_ctx.$style.blockContent]: true,
            [_ctx.$style.blockContentExpanded]: isExpanded.value
          })
        }, [
          _ctx.error ? (openBlock(), createBlock(_component_NodeErrorView, {
            key: 0,
            error: _ctx.error,
            class: normalizeClass(_ctx.$style.error)
          }, null, 8, ["error", "class"])) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(parsedRun.value, ({ parsedContent, raw }, index) => {
            return openBlock(), createElementBlock("div", {
              key: index,
              class: normalizeClass(_ctx.$style.contentText),
              "data-content-type": parsedContent == null ? void 0 : parsedContent.type
            }, [
              parsedContent && !isShowRaw.value ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                parsedContent.type === "json" ? (openBlock(), createBlock(unref(VueMarkdown), {
                  key: 0,
                  source: jsonToMarkdown(parsedContent.data),
                  class: normalizeClass(_ctx.$style.markdown),
                  options: markdownOptions
                }, null, 8, ["source", "class"])) : createCommentVNode("", true),
                parsedContent.type === "markdown" ? (openBlock(), createBlock(unref(VueMarkdown), {
                  key: 1,
                  source: parsedContent.data,
                  class: normalizeClass(_ctx.$style.markdown),
                  options: markdownOptions
                }, null, 8, ["source", "class"])) : createCommentVNode("", true),
                parsedContent.type === "text" ? (openBlock(), createElementBlock("p", {
                  key: 2,
                  class: normalizeClass(_ctx.$style.runText),
                  textContent: toDisplayString(parsedContent.data)
                }, null, 10, _hoisted_2$2)) : createCommentVNode("", true)
              ], 64)) : (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(_ctx.$style.rawContent)
              }, [
                createVNode(_component_n8n_icon_button, {
                  size: "small",
                  class: normalizeClass(_ctx.$style.copyToClipboard),
                  type: "secondary",
                  title: _ctx.$locale.baseText("nodeErrorView.copyToClipboard"),
                  icon: "copy",
                  onClick: ($event) => onCopyToClipboard(raw)
                }, null, 8, ["class", "title", "onClick"]),
                createVNode(unref(VueMarkdown), {
                  source: jsonToMarkdown(raw),
                  class: normalizeClass(_ctx.$style.markdown)
                }, null, 8, ["source", "class"])
              ], 2))
            ], 10, _hoisted_1$2);
          }), 128))
        ], 2)
      ], 2);
    };
  }
});
const copyToClipboard = "_copyToClipboard_vdvnc_1";
const rawContent = "_rawContent_vdvnc_7";
const markdown = "_markdown_vdvnc_11";
const contentText = "_contentText_vdvnc_35";
const block = "_block_vdvnc_40";
const blockContent = "_blockContent_vdvnc_48";
const blockContentExpanded = "_blockContentExpanded_vdvnc_52";
const runText = "_runText_vdvnc_56";
const rawSwitch = "_rawSwitch_vdvnc_61";
const blockHeader = "_blockHeader_vdvnc_68";
const blockTitle = "_blockTitle_vdvnc_80";
const blockToggle = "_blockToggle_vdvnc_85";
const error = "_error_vdvnc_92";
const style0$2 = {
  copyToClipboard,
  rawContent,
  markdown,
  contentText,
  block,
  blockContent,
  blockContentExpanded,
  runText,
  rawSwitch,
  blockHeader,
  blockTitle,
  blockToggle,
  error
};
const cssModules$2 = {
  "$style": style0$2
};
const AiRunContentBlock = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["__cssModules", cssModules$2]]);
const _hoisted_1$1 = { key: 0 };
const _hoisted_2$1 = { key: 1 };
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "RunDataAiContent",
  props: {
    inputData: {},
    contentIndex: {}
  },
  setup(__props) {
    const props = __props;
    const nodeTypesStore = useNodeTypesStore();
    const workflowsStore = useWorkflowsStore();
    const consumedTokensSum = computed(() => {
      var _a, _b;
      const tokenUsage = (_b = (_a = outputRun.value) == null ? void 0 : _a.data) == null ? void 0 : _b.reduce(
        (acc, curr) => {
          var _a2, _b2;
          const tokenUsageData = ((_a2 = curr.json) == null ? void 0 : _a2.tokenUsage) ?? ((_b2 = curr.json) == null ? void 0 : _b2.tokenUsageEstimate);
          if (!tokenUsageData) return acc;
          return {
            completionTokens: acc.completionTokens + tokenUsageData.completionTokens,
            promptTokens: acc.promptTokens + tokenUsageData.promptTokens,
            totalTokens: acc.totalTokens + tokenUsageData.totalTokens
          };
        },
        {
          completionTokens: 0,
          promptTokens: 0,
          totalTokens: 0
        }
      );
      return tokenUsage;
    });
    const usingTokensEstimates = computed(() => {
      var _a, _b;
      return (_b = (_a = outputRun.value) == null ? void 0 : _a.data) == null ? void 0 : _b.some((d) => {
        var _a2;
        return (_a2 = d.json) == null ? void 0 : _a2.tokenUsageEstimate;
      });
    });
    function formatTokenUsageCount(count) {
      return usingTokensEstimates.value ? `~${count}` : count.toString();
    }
    function extractRunMeta(run) {
      const uiNode = workflowsStore.getNodeByName(props.inputData.node);
      const nodeType = nodeTypesStore.getNodeType((uiNode == null ? void 0 : uiNode.type) ?? "");
      const runMeta2 = {
        startTimeMs: run.metadata.startTime,
        executionTimeMs: run.metadata.executionTime,
        node: nodeType,
        type: run.inOut,
        connectionType: run.type
      };
      return runMeta2;
    }
    const outputRun = computed(() => {
      return props.inputData.data.find((r) => r.inOut === "output");
    });
    const runMeta = computed(() => {
      if (outputRun.value === void 0) {
        return;
      }
      return extractRunMeta(outputRun.value);
    });
    const executionRunData = computed(() => {
      var _a, _b, _c;
      return (_c = (_b = (_a = workflowsStore.getWorkflowExecution) == null ? void 0 : _a.data) == null ? void 0 : _b.resultData) == null ? void 0 : _c.runData;
    });
    const outputError = computed(() => {
      var _a, _b, _c;
      return (_c = (_b = (_a = executionRunData.value) == null ? void 0 : _a[props.inputData.node]) == null ? void 0 : _b[props.inputData.runIndex]) == null ? void 0 : _c.error;
    });
    return (_ctx, _cache) => {
      var _a, _b, _c, _d, _e, _f;
      const _component_n8n_tooltip = resolveComponent("n8n-tooltip");
      const _component_n8n_text = resolveComponent("n8n-text");
      const _component_n8n_info_tip = resolveComponent("n8n-info-tip");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(_ctx.$style.container)
      }, [
        createBaseVNode("header", {
          class: normalizeClass(_ctx.$style.header)
        }, [
          ((_a = runMeta.value) == null ? void 0 : _a.node) ? (openBlock(), createBlock(_sfc_main$4, {
            key: 0,
            class: normalizeClass(_ctx.$style.nodeIcon),
            "node-type": runMeta.value.node,
            size: 20
          }, null, 8, ["class", "node-type"])) : createCommentVNode("", true),
          createBaseVNode("div", {
            class: normalizeClass(_ctx.$style.headerWrap)
          }, [
            createBaseVNode("p", {
              class: normalizeClass(_ctx.$style.title)
            }, toDisplayString(_ctx.inputData.node), 3),
            createBaseVNode("ul", {
              class: normalizeClass(_ctx.$style.meta)
            }, [
              ((_b = runMeta.value) == null ? void 0 : _b.startTimeMs) ? (openBlock(), createElementBlock("li", _hoisted_1$1, toDisplayString((_c = runMeta.value) == null ? void 0 : _c.executionTimeMs) + "ms", 1)) : createCommentVNode("", true),
              ((_d = runMeta.value) == null ? void 0 : _d.startTimeMs) ? (openBlock(), createElementBlock("li", _hoisted_2$1, [
                createVNode(_component_n8n_tooltip, null, {
                  content: withCtx(() => {
                    var _a2;
                    return [
                      createTextVNode(toDisplayString(new Date((_a2 = runMeta.value) == null ? void 0 : _a2.startTimeMs).toLocaleString()), 1)
                    ];
                  }),
                  default: withCtx(() => {
                    var _a2;
                    return [
                      createTextVNode(" " + toDisplayString(_ctx.$locale.baseText("runData.aiContentBlock.startedAt", {
                        interpolate: {
                          startTime: new Date((_a2 = runMeta.value) == null ? void 0 : _a2.startTimeMs).toLocaleTimeString()
                        }
                      })), 1)
                    ];
                  }),
                  _: 1
                })
              ])) : createCommentVNode("", true),
              (((_e = consumedTokensSum.value) == null ? void 0 : _e.totalTokens) ?? 0) > 0 ? (openBlock(), createElementBlock("li", {
                key: 2,
                class: normalizeClass(_ctx.$style.tokensUsage)
              }, [
                createTextVNode(toDisplayString(_ctx.$locale.baseText("runData.aiContentBlock.tokens", {
                  interpolate: {
                    count: formatTokenUsageCount(((_f = consumedTokensSum.value) == null ? void 0 : _f.totalTokens) ?? 0)
                  }
                })) + " ", 1),
                createVNode(_component_n8n_info_tip, {
                  type: "tooltip",
                  theme: "info-light",
                  "tooltip-placement": "right"
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", null, [
                      createVNode(_component_n8n_text, {
                        bold: true,
                        size: "small"
                      }, {
                        default: withCtx(() => {
                          var _a2;
                          return [
                            createTextVNode(toDisplayString(_ctx.$locale.baseText("runData.aiContentBlock.tokens.prompt")) + " " + toDisplayString(_ctx.$locale.baseText("runData.aiContentBlock.tokens", {
                              interpolate: {
                                count: formatTokenUsageCount(((_a2 = consumedTokensSum.value) == null ? void 0 : _a2.promptTokens) ?? 0)
                              }
                            })), 1)
                          ];
                        }),
                        _: 1
                      }),
                      _cache[0] || (_cache[0] = createBaseVNode("br", null, null, -1)),
                      createVNode(_component_n8n_text, {
                        bold: true,
                        size: "small"
                      }, {
                        default: withCtx(() => {
                          var _a2;
                          return [
                            createTextVNode(toDisplayString(_ctx.$locale.baseText("runData.aiContentBlock.tokens.completion")) + " " + toDisplayString(_ctx.$locale.baseText("runData.aiContentBlock.tokens", {
                              interpolate: {
                                count: formatTokenUsageCount(((_a2 = consumedTokensSum.value) == null ? void 0 : _a2.completionTokens) ?? 0)
                              }
                            })), 1)
                          ];
                        }),
                        _: 1
                      })
                    ])
                  ]),
                  _: 1
                })
              ], 2)) : createCommentVNode("", true)
            ], 2)
          ], 2)
        ], 2),
        (openBlock(true), createElementBlock(Fragment, null, renderList(props.inputData.data, (run, index) => {
          return openBlock(), createElementBlock("main", {
            key: index,
            class: normalizeClass(_ctx.$style.content)
          }, [
            createVNode(AiRunContentBlock, {
              "run-data": run,
              error: run.inOut === "output" ? outputError.value : void 0
            }, null, 8, ["run-data", "error"])
          ], 2);
        }), 128))
      ], 2);
    };
  }
});
const container$1 = "_container_dypaw_2";
const nodeIcon = "_nodeIcon_dypaw_5";
const header = "_header_dypaw_8";
const headerWrap = "_headerWrap_dypaw_14";
const title$1 = "_title_dypaw_18";
const meta = "_meta_dypaw_25";
const tokensUsage = "_tokensUsage_dypaw_41";
const style0$1 = {
  container: container$1,
  nodeIcon,
  header,
  headerWrap,
  title: title$1,
  meta,
  tokensUsage
};
const cssModules$1 = {
  "$style": style0$1
};
const RunDataAiContent = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__cssModules", cssModules$1]]);
const _hoisted_1 = ["data-tree-depth"];
const _hoisted_2 = ["onClick"];
const _hoisted_3 = ["textContent"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "RunDataAi",
  props: {
    node: {},
    runIndex: { default: 0 },
    hideTitle: { type: Boolean },
    slim: { type: Boolean },
    workflow: {}
  },
  setup(__props) {
    const props = __props;
    const workflowsStore = useWorkflowsStore();
    const nodeTypesStore = useNodeTypesStore();
    const selectedRun = ref([]);
    function isTreeNodeSelected(node) {
      return selectedRun.value.some((run) => run.node === node.node && run.runIndex === node.runIndex);
    }
    function getReferencedData(taskData, withInput, withOutput) {
      if (!taskData) {
        return [];
      }
      const returnData = [];
      function addFunction(data, inOut) {
        if (!data) {
          return;
        }
        Object.keys(data).map((type) => {
          returnData.push({
            data: data[type][0],
            inOut,
            type,
            metadata: {
              executionTime: taskData.executionTime,
              startTime: taskData.startTime
            }
          });
        });
      }
      if (withInput) {
        addFunction(taskData.inputOverride, "input");
      }
      {
        addFunction(taskData.data, "output");
      }
      return returnData;
    }
    function toggleTreeItem(node) {
      node.expanded = !node.expanded;
    }
    function onItemClick(data) {
      var _a, _b;
      const matchingRun = (_a = aiData.value) == null ? void 0 : _a.find(
        (run) => run.node === data.node && run.runIndex === data.runIndex
      );
      if (!matchingRun) {
        selectedRun.value = [];
        return;
      }
      const selectedNodeRun = (_b = workflowsStore.getWorkflowResultDataByNodeName(data.node)) == null ? void 0 : _b[data.runIndex];
      if (!selectedNodeRun) {
        return;
      }
      selectedRun.value = [
        {
          node: data.node,
          runIndex: data.runIndex,
          data: getReferencedData(selectedNodeRun, true)
        }
      ];
    }
    function getNodeType(nodeName) {
      const node = workflowsStore.getNodeByName(nodeName);
      if (!node) {
        return null;
      }
      const nodeType = nodeTypesStore.getNodeType(node == null ? void 0 : node.type);
      return nodeType;
    }
    function selectFirst() {
      if (executionTree.value.length && executionTree.value[0].children.length) {
        onItemClick(executionTree.value[0].children[0]);
      }
    }
    const createNode = (nodeName, currentDepth, r, children = []) => {
      var _a, _b;
      return {
        node: nodeName,
        id: nodeName,
        depth: currentDepth,
        startTime: ((_b = (_a = r == null ? void 0 : r.data) == null ? void 0 : _a.metadata) == null ? void 0 : _b.startTime) ?? 0,
        runIndex: (r == null ? void 0 : r.runIndex) ?? 0,
        children
      };
    };
    function getTreeNodeData(nodeName, currentDepth) {
      var _a;
      const connections = props.workflow.connectionsByDestinationNode[nodeName];
      const resultData = ((_a = aiData.value) == null ? void 0 : _a.filter((data) => data.node === nodeName)) ?? [];
      if (!connections) {
        return resultData.map((d) => createNode(nodeName, currentDepth, d));
      }
      const connectedSubNodes = props.workflow.getParentNodes(nodeName, "ALL_NON_MAIN", 1);
      const children = connectedSubNodes.filter((name) => {
        var _a2;
        return (_a2 = aiData.value) == null ? void 0 : _a2.find((data) => data.node === name);
      }).flatMap((name) => getTreeNodeData(name, currentDepth + 1));
      children.sort((a, b) => a.startTime - b.startTime);
      if (resultData.length) {
        return resultData.map((r) => createNode(nodeName, currentDepth, r, children));
      }
      return [createNode(nodeName, currentDepth, void 0, children)];
    }
    const aiData = computed(() => {
      var _a, _b;
      const result = [];
      const connectedSubNodes = props.workflow.getParentNodes(props.node.name, "ALL_NON_MAIN");
      const rootNodeResult = workflowsStore.getWorkflowResultDataByNodeName(props.node.name);
      const rootNodeStartTime = ((_a = rootNodeResult == null ? void 0 : rootNodeResult[props.runIndex ?? 0]) == null ? void 0 : _a.startTime) ?? 0;
      const rootNodeEndTime = rootNodeStartTime + (((_b = rootNodeResult == null ? void 0 : rootNodeResult[props.runIndex ?? 0]) == null ? void 0 : _b.executionTime) ?? 0);
      connectedSubNodes.forEach((nodeName) => {
        const nodeRunData = workflowsStore.getWorkflowResultDataByNodeName(nodeName) ?? [];
        nodeRunData.forEach((run, runIndex) => {
          const referenceData = {
            data: getReferencedData(run, false)[0],
            node: nodeName,
            runIndex
          };
          result.push(referenceData);
        });
      });
      result.sort((a, b) => {
        var _a2, _b2, _c, _d;
        const aTime = ((_b2 = (_a2 = a.data) == null ? void 0 : _a2.metadata) == null ? void 0 : _b2.startTime) ?? 0;
        const bTime = ((_d = (_c = b.data) == null ? void 0 : _c.metadata) == null ? void 0 : _d.startTime) ?? 0;
        return aTime - bTime;
      });
      const currentNodeResult = result.filter((r) => {
        var _a2, _b2;
        const startTime = ((_b2 = (_a2 = r.data) == null ? void 0 : _a2.metadata) == null ? void 0 : _b2.startTime) ?? 0;
        return startTime >= rootNodeStartTime && startTime < rootNodeEndTime;
      });
      return currentNodeResult;
    });
    const executionTree = computed(() => {
      const rootNode = props.node;
      const tree2 = getTreeNodeData(rootNode.name, 1);
      return tree2 || [];
    });
    watch(() => props.runIndex, selectFirst, { immediate: true });
    return (_ctx, _cache) => {
      const _component_font_awesome_icon = resolveComponent("font-awesome-icon");
      const _component_n8n_tooltip = resolveComponent("n8n-tooltip");
      const _component_n8n_text = resolveComponent("n8n-text");
      return aiData.value.length > 0 ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(_ctx.$style.container)
      }, [
        createBaseVNode("div", {
          class: normalizeClass({ [_ctx.$style.tree]: true, [_ctx.$style.slim]: _ctx.slim })
        }, [
          createVNode(unref(ElTree), {
            data: executionTree.value,
            props: { label: "node" },
            "default-expand-all": "",
            indent: 12,
            "expand-on-click-node": false,
            "data-test-id": "lm-chat-logs-tree",
            onNodeClick: onItemClick
          }, {
            default: withCtx(({ node, data }) => [
              createBaseVNode("div", {
                class: normalizeClass({
                  [_ctx.$style.treeNode]: true,
                  [_ctx.$style.isSelected]: isTreeNodeSelected(data)
                }),
                "data-tree-depth": data.depth,
                style: normalizeStyle({ "--item-depth": data.depth })
              }, [
                data.children.length ? (openBlock(), createElementBlock("button", {
                  key: 0,
                  class: normalizeClass(_ctx.$style.treeToggle),
                  onClick: ($event) => toggleTreeItem(node)
                }, [
                  createVNode(_component_font_awesome_icon, {
                    icon: node.expanded ? "angle-down" : "angle-up"
                  }, null, 8, ["icon"])
                ], 10, _hoisted_2)) : createCommentVNode("", true),
                createVNode(_component_n8n_tooltip, {
                  disabled: !_ctx.slim,
                  placement: "right"
                }, {
                  content: withCtx(() => [
                    createTextVNode(toDisplayString(node.label), 1)
                  ]),
                  default: withCtx(() => [
                    createBaseVNode("span", {
                      class: normalizeClass(_ctx.$style.leafLabel)
                    }, [
                      createVNode(_sfc_main$4, {
                        "node-type": getNodeType(data.node),
                        size: 17
                      }, null, 8, ["node-type"]),
                      !_ctx.slim ? (openBlock(), createElementBlock("span", {
                        key: 0,
                        textContent: toDisplayString(node.label)
                      }, null, 8, _hoisted_3)) : createCommentVNode("", true)
                    ], 2)
                  ]),
                  _: 2
                }, 1032, ["disabled"])
              ], 14, _hoisted_1)
            ]),
            _: 1
          }, 8, ["data"])
        ], 2),
        createBaseVNode("div", {
          class: normalizeClass(_ctx.$style.runData)
        }, [
          selectedRun.value.length === 0 ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(_ctx.$style.empty)
          }, [
            createVNode(_component_n8n_text, { size: "large" }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(_ctx.$locale.baseText("ndv.output.ai.empty", {
                  interpolate: {
                    node: props.node.name
                  }
                })), 1)
              ]),
              _: 1
            })
          ], 2)) : createCommentVNode("", true),
          (openBlock(true), createElementBlock(Fragment, null, renderList(selectedRun.value, (data, index) => {
            return openBlock(), createElementBlock("div", {
              key: `${data.node}__${data.runIndex}__index`,
              "data-test-id": "lm-chat-logs-entry"
            }, [
              createVNode(RunDataAiContent, {
                "input-data": data,
                "content-index": index
              }, null, 8, ["input-data", "content-index"])
            ]);
          }), 128))
        ], 2)
      ], 2)) : createCommentVNode("", true);
    };
  }
});
const treeToggle = "_treeToggle_z0rh6_1";
const leafLabel = "_leafLabel_z0rh6_9";
const empty = "_empty_z0rh6_15";
const title = "_title_z0rh6_19";
const tree = "_tree_z0rh6_1";
const slim = "_slim_z0rh6_32";
const runData = "_runData_z0rh6_36";
const container = "_container_z0rh6_42";
const isSelected = "_isSelected_z0rh6_69";
const treeNode = "_treeNode_z0rh6_73";
const style0 = {
  treeToggle,
  leafLabel,
  empty,
  title,
  tree,
  slim,
  runData,
  container,
  isSelected,
  treeNode
};
const cssModules = {
  "$style": style0
};
const RunDataAi = /* @__PURE__ */ _export_sfc(_sfc_main, [["__cssModules", cssModules]]);
const RunDataAi$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: RunDataAi
}, Symbol.toStringTag, { value: "Module" }));
export {
  RunDataAi as R,
  _sfc_main$3 as _,
  RunDataAi$1 as a,
  capitalize as c,
  upperFirst as u
};
