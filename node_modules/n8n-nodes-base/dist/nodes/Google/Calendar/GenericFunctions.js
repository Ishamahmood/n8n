"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TIMEZONE_VALIDATION_REGEX = void 0;
exports.googleApiRequest = googleApiRequest;
exports.googleApiRequestAllItems = googleApiRequestAllItems;
exports.encodeURIComponentOnce = encodeURIComponentOnce;
exports.getCalendars = getCalendars;
exports.getTimezones = getTimezones;
exports.addNextOccurrence = addNextOccurrence;
exports.addTimezoneToDate = addTimezoneToDate;
const n8n_workflow_1 = require("n8n-workflow");
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const rrule_1 = require("rrule");
async function googleApiRequest(method, resource, body = {}, qs = {}, uri, headers = {}) {
    const options = {
        headers: {
            'Content-Type': 'application/json',
        },
        method,
        body,
        qs,
        uri: uri || `https://www.googleapis.com${resource}`,
        json: true,
    };
    try {
        if (Object.keys(headers).length !== 0) {
            options.headers = Object.assign({}, options.headers, headers);
        }
        if (Object.keys(body).length === 0) {
            delete options.body;
        }
        return await this.helpers.requestOAuth2.call(this, 'googleCalendarOAuth2Api', options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
async function googleApiRequestAllItems(propertyName, method, endpoint, body = {}, query = {}) {
    const returnData = [];
    let responseData;
    query.maxResults = 100;
    do {
        responseData = await googleApiRequest.call(this, method, endpoint, body, query);
        query.pageToken = responseData.nextPageToken;
        returnData.push.apply(returnData, responseData[propertyName]);
    } while (responseData.nextPageToken !== undefined && responseData.nextPageToken !== '');
    return returnData;
}
function encodeURIComponentOnce(uri) {
    return encodeURIComponent(decodeURIComponent(uri));
}
async function getCalendars(filter) {
    const calendars = (await googleApiRequestAllItems.call(this, 'items', 'GET', '/calendar/v3/users/me/calendarList'));
    const results = calendars
        .map((c) => ({
        name: c.summary,
        value: c.id,
    }))
        .filter((c) => !filter ||
        c.name.toLowerCase().includes(filter.toLowerCase()) ||
        c.value?.toString() === filter)
        .sort((a, b) => {
        if (a.name.toLowerCase() < b.name.toLowerCase())
            return -1;
        if (a.name.toLowerCase() > b.name.toLowerCase())
            return 1;
        return 0;
    });
    return { results };
}
exports.TIMEZONE_VALIDATION_REGEX = `(${moment_timezone_1.default.tz
    .names()
    .map((t) => t.replace('+', '\\+'))
    .join('|')})[ \t]*`;
async function getTimezones(filter) {
    const results = moment_timezone_1.default.tz
        .names()
        .map((timezone) => ({
        name: timezone,
        value: timezone,
    }))
        .filter((c) => !filter ||
        c.name.toLowerCase().includes(filter.toLowerCase()) ||
        c.value?.toString() === filter);
    return { results };
}
function addNextOccurrence(items) {
    for (const item of items) {
        if (item.recurrence) {
            let eventRecurrence;
            try {
                eventRecurrence = item.recurrence.find((r) => r.toUpperCase().startsWith('RRULE'));
                if (!eventRecurrence)
                    continue;
                const rrule = rrule_1.RRule.fromString(eventRecurrence);
                const until = rrule.options?.until;
                const now = new Date();
                if (until && until < now) {
                    continue;
                }
                const nextOccurrence = rrule.after(new Date());
                item.nextOccurrence = {
                    start: {
                        dateTime: (0, moment_timezone_1.default)(nextOccurrence).format(),
                        timeZone: item.start.timeZone,
                    },
                    end: {
                        dateTime: (0, moment_timezone_1.default)(nextOccurrence)
                            .add((0, moment_timezone_1.default)(item.end.dateTime).diff((0, moment_timezone_1.default)(item.start.dateTime)))
                            .format(),
                        timeZone: item.end.timeZone,
                    },
                };
            }
            catch (error) {
                console.log(`Error adding next occurrence ${eventRecurrence}`);
            }
        }
    }
    return items;
}
const hasTimezone = (date) => date.endsWith('Z') || /\+\d{2}:\d{2}$/.test(date);
function addTimezoneToDate(date, timezone) {
    if (hasTimezone(date))
        return date;
    return moment_timezone_1.default.tz(date, timezone).utc().format();
}
//# sourceMappingURL=GenericFunctions.js.map