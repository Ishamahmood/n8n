"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsTaskRunnerSandbox = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const WrappedExecutionError_1 = require("./errors/WrappedExecutionError");
const JsCodeValidator_1 = require("./JsCodeValidator");
class JsTaskRunnerSandbox {
    constructor(jsCode, nodeMode, workflowMode, executeFunctions) {
        this.jsCode = jsCode;
        this.nodeMode = nodeMode;
        this.workflowMode = workflowMode;
        this.executeFunctions = executeFunctions;
    }
    async runCodeAllItems() {
        const itemIndex = 0;
        const executionResult = await this.executeFunctions.startJob('javascript', {
            code: this.jsCode,
            nodeMode: this.nodeMode,
            workflowMode: this.workflowMode,
            continueOnFail: this.executeFunctions.continueOnFail(),
        }, itemIndex);
        return executionResult.ok
            ? executionResult.result
            : this.throwExecutionError(executionResult.error);
    }
    async runCodeForEachItem() {
        (0, JsCodeValidator_1.validateNoDisallowedMethodsInRunForEach)(this.jsCode, 0);
        const itemIndex = 0;
        const executionResult = await this.executeFunctions.startJob('javascript', {
            code: this.jsCode,
            nodeMode: this.nodeMode,
            workflowMode: this.workflowMode,
            continueOnFail: this.executeFunctions.continueOnFail(),
        }, itemIndex);
        return executionResult.ok
            ? executionResult.result
            : this.throwExecutionError(executionResult.error);
    }
    throwExecutionError(error) {
        if (error instanceof Error) {
            throw error;
        }
        else if ((0, WrappedExecutionError_1.isWrappableError)(error)) {
            throw new WrappedExecutionError_1.WrappedExecutionError(error);
        }
        throw new n8n_workflow_1.ApplicationError(`Unknown error: ${JSON.stringify(error)}`);
    }
}
exports.JsTaskRunnerSandbox = JsTaskRunnerSandbox;
//# sourceMappingURL=JsTaskRunnerSandbox.js.map