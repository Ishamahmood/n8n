"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MESSAGE_PREFIX = void 0;
exports.getSendAndWaitProperties = getSendAndWaitProperties;
exports.sendAndWaitWebhook = sendAndWaitWebhook;
exports.getSendAndWaitConfig = getSendAndWaitConfig;
exports.createEmail = createEmail;
const n8n_workflow_1 = require("n8n-workflow");
const utilities_1 = require("../utilities");
const email_templates_1 = require("./email-templates");
exports.MESSAGE_PREFIX = 'ACTION REQUIRED: ';
function getSendAndWaitProperties(targetProperties, resource = 'message', additionalProperties = []) {
    const buttonStyle = {
        displayName: 'Button Style',
        name: 'buttonStyle',
        type: 'options',
        default: 'primary',
        options: [
            {
                name: 'Primary',
                value: 'primary',
            },
            {
                name: 'Secondary',
                value: 'secondary',
            },
        ],
    };
    const sendAndWait = [
        ...targetProperties,
        {
            displayName: 'Subject',
            name: 'subject',
            type: 'string',
            default: '',
            required: true,
            placeholder: 'e.g. Approval required',
        },
        {
            displayName: 'Message',
            name: 'message',
            type: 'string',
            default: '',
            required: true,
            typeOptions: {
                rows: 5,
            },
        },
        {
            displayName: 'Approval Options',
            name: 'approvalOptions',
            type: 'fixedCollection',
            placeholder: 'Add option',
            default: {},
            options: [
                {
                    displayName: 'Values',
                    name: 'values',
                    values: [
                        {
                            displayName: 'Type of Approval',
                            name: 'approvalType',
                            type: 'options',
                            placeholder: 'Add option',
                            default: 'single',
                            options: [
                                {
                                    name: 'Approve Only',
                                    value: 'single',
                                },
                                {
                                    name: 'Approve and Disapprove',
                                    value: 'double',
                                },
                            ],
                        },
                        {
                            displayName: 'Approve Button Label',
                            name: 'approveLabel',
                            type: 'string',
                            default: 'Approve',
                            displayOptions: {
                                show: {
                                    approvalType: ['single', 'double'],
                                },
                            },
                        },
                        {
                            ...buttonStyle,
                            displayName: 'Approve Button Style',
                            name: 'buttonApprovalStyle',
                            displayOptions: {
                                show: {
                                    approvalType: ['single', 'double'],
                                },
                            },
                        },
                        {
                            displayName: 'Disapprove Button Label',
                            name: 'disapproveLabel',
                            type: 'string',
                            default: 'Decline',
                            displayOptions: {
                                show: {
                                    approvalType: ['double'],
                                },
                            },
                        },
                        {
                            ...buttonStyle,
                            displayName: 'Disapprove Button Style',
                            name: 'buttonDisapprovalStyle',
                            default: 'secondary',
                            displayOptions: {
                                show: {
                                    approvalType: ['double'],
                                },
                            },
                        },
                    ],
                },
            ],
        },
        ...additionalProperties,
        {
            displayName: 'Use the wait node for more complex approval flows. <a href="https://docs.n8n.io/nodes/n8n-nodes-base.wait" target="_blank">More info</a>',
            name: 'useWaitNotice',
            type: 'notice',
            default: '',
        },
    ];
    return (0, n8n_workflow_1.updateDisplayOptions)({
        show: {
            resource: [resource],
            operation: [n8n_workflow_1.SEND_AND_WAIT_OPERATION],
        },
    }, sendAndWait);
}
async function sendAndWaitWebhook() {
    const query = this.getRequestObject().query;
    const approved = query.approved === 'true';
    return {
        webhookResponse: email_templates_1.ACTION_RECORDED_PAGE,
        workflowData: [[{ json: { data: { approved } } }]],
    };
}
function getSendAndWaitConfig(context) {
    const message = (0, utilities_1.escapeHtml)(context.getNodeParameter('message', 0, '').trim());
    const subject = (0, utilities_1.escapeHtml)(context.getNodeParameter('subject', 0, ''));
    const resumeUrl = context.evaluateExpression('{{ $execution?.resumeUrl }}', 0);
    const nodeId = context.evaluateExpression('{{ $nodeId }}', 0);
    const approvalOptions = context.getNodeParameter('approvalOptions.values', 0, {});
    const config = {
        title: subject,
        message,
        url: `${resumeUrl}/${nodeId}`,
        options: [],
    };
    if (approvalOptions.approvalType === 'double') {
        const approveLabel = (0, utilities_1.escapeHtml)(approvalOptions.approveLabel || 'Approve');
        const buttonApprovalStyle = approvalOptions.buttonApprovalStyle || 'primary';
        const disapproveLabel = (0, utilities_1.escapeHtml)(approvalOptions.disapproveLabel || 'Disapprove');
        const buttonDisapprovalStyle = approvalOptions.buttonDisapprovalStyle || 'secondary';
        config.options.push({
            label: disapproveLabel,
            value: 'false',
            style: buttonDisapprovalStyle,
        });
        config.options.push({
            label: approveLabel,
            value: 'true',
            style: buttonApprovalStyle,
        });
    }
    else {
        const label = (0, utilities_1.escapeHtml)(approvalOptions.approveLabel || 'Approve');
        const style = approvalOptions.buttonApprovalStyle || 'primary';
        config.options.push({
            label,
            value: 'true',
            style,
        });
    }
    return config;
}
function createButton(url, label, approved, style) {
    let buttonStyle = email_templates_1.BUTTON_STYLE_PRIMARY;
    if (style === 'secondary') {
        buttonStyle = email_templates_1.BUTTON_STYLE_SECONDARY;
    }
    return `<a href="${url}?approved=${approved}" target="_blank" style="${buttonStyle}">${label}</a>`;
}
function createEmail(context) {
    const to = context.getNodeParameter('sendTo', 0, '').trim();
    const config = getSendAndWaitConfig(context);
    if (to.indexOf('@') === -1 || (to.match(/@/g) || []).length > 1) {
        const description = `The email address '${to}' in the 'To' field isn't valid or contains multiple addresses. Please provide only a single email address.`;
        throw new n8n_workflow_1.NodeOperationError(context.getNode(), 'Invalid email address', {
            description,
            itemIndex: 0,
        });
    }
    const buttons = [];
    for (const option of config.options) {
        buttons.push(createButton(config.url, option.label, option.value, option.style));
    }
    const instanceId = context.getInstanceId();
    const email = {
        to,
        subject: `${exports.MESSAGE_PREFIX}${config.title}`,
        body: '',
        htmlBody: (0, email_templates_1.createEmailBody)(config.message, buttons.join('\n'), instanceId),
    };
    return email;
}
//# sourceMappingURL=utils.js.map